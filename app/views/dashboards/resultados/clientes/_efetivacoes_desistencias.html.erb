<div class="col-lg-12 no-padding">
  <div class="panel panel-default" style="margin-bottom: 10px !important;">
    <div class="panel-heading" style="height: 39px">
      <div class="col-sm-2  pull" style="margin-top: -6px !important; padding-left: 0px" id="tipo_grafico">
        <%= select_tag  'filtro_tipo_grafico', options_for_select([
                                                              ['Efetivações x Desistências', 1],
                                                              ['Pgto. 2º honorário', 3],
                                                              ['Pgto. 3º honorário', 4],
                                                              ['Novos honorários x honorários baixados', 2]
                                                              ], 1), {:class => "form-control input-sm chosen-select"} %>
      </div>
      <div class="col-sm-2  pull-right" style="margin-top: -6px !important;" id="grafico_por_efet_des">
        <%= select_tag  'filtro_grafico_efet_des', options_for_select([
                                                              ['Por cidade', 1],
                                                              ['Por UF', 6],
                                                              ['Efetivações por sistema', 2],
                                                              ['Desistências por sistema', 3],
                                                              ['Efetivações por sis. - Tabela', 4],
                                                              ['Desativações. por sis. - Tabela', 5]
                                                              ], 4), {:class => "form-control input-sm chosen-select"} %>
      </div>
    </div>
    <div class="panel-body no-padding">
      <div class="col-lg-12 padding-left-right">
        <div class="col-md-3 padding-5">
          <div class="col-lg-12 padding-left-right">
            <div class="ibox" style="cursor: pointer" onclick="carregarInfoEfetivacoesFinanceiro()">
              <div class="ibox-content product-box">
                <div class="ibox-title ibox-title-without-border-style">
                  <h5>Efetivações</h5>
                  <span class="label label-info pull-right" id="compentencia_cliente_efetivacoes"></span>
                </div>
                <div class="ibox-content padding-5" style="height: 55px !important;">
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-left" id="efetivacoes_quantidade"></h2>
                  </div>
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-right" id="efetivacoes_valor" style="margin-bottom: 3px"></h2>
                    <small class="pull-right" id="media_efetivacoes"></small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-lg-12 padding-left-right">
            <div class="ibox" style="cursor: pointer" onclick="carregarInfoDesistenciasFinanceiro()">
              <div class="ibox-content product-box">
                <div class="ibox-title ibox-title-without-border-style">
                  <h5>Desistências</h5>
                  <span class="label label-info pull-right" id="compentencia_cliente_desativacoes"></span>
                </div>
                <div class="ibox-content padding-5" style="height: 55px !important;">
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-left" id="desativacoes_quantidade"></h2>
                  </div>
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-right" id="desativacoes_valor" style="margin-bottom: 3px"></h2>
                    <small class="pull-right" id="desativacoes_valor_media"></small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-lg-12 padding-left-right">
            <div class="ibox">
              <div class="ibox-content product-box">
                <div class="ibox-title ibox-title-without-border-style">
                  <h5>Saldo</h5>
                  <span class="label label-info pull-right" id="compentencia_cliente_saldo"></span>
                </div>
                <div class="ibox-content padding-5" style="height: 55px !important;">
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-left" id="saldo_quantidade"></h2>
                  </div>
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-right" id="saldo_valor" style="margin-bottom: 3px"></h2>
                    <small class="pull-right" id="saldo_media"></small>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-lg-12 padding-left-right">
            <div class="ibox">
              <div class="ibox-content product-box">
                <div class="ibox-title ibox-title-without-border-style">
                  <div class="col-lg-7 no-padding">
                    <h5>Saldo Acumulado</h5>
                  </div>
                  <div class="col-lg-5 no-padding">
                    <select id="filtro_periodo_saldo" class="form-control input-sm">
                      <option value="ano_atual" selected>Ano atual</option>
                      <option value="3">3 meses</option>
                      <option value="6">6 meses</option>
                      <option value="12">12 meses</option>
                      <option value="24">24 meses</option>
                    </select>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="ibox-content padding-5" style="height: 55px !important;">
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-left" id="saldo_acumulado_quantidade">Total 0</h2>
                  </div>
                  <div class="col-lg-6 no-padding">
                    <h2 class="pull-right" id="saldo_acumulado_valor" style="margin-bottom: 3px">R$0,00</h2>
                    <small class="pull-right" id="saldo_acumulado_media">Média R$0,00</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-7 padding-5">
          <div class="ibox">
            <div class="ibox-content product-box">
              <div class="ibox-title ibox-title-without-border-style">
                <span class="label label-info pull-right">Anual</span>
                <h5 id="titulo_grafico_bars">Efetivações x Desistências</h5>
              </div>
              <div class="ibox-content padding-5">
                <div id="efetivacoes_desistencias_12_meses" style="height: 300px !important;"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-2 padding-5">
          <div class="ibox">
            <div class="ibox-content product-box">
              <div class="ibox-title ibox-title-without-border-style">
                  <span class="label label-info pull-right" id="desc_compt_eft_dest">Atual </span>
                  <h5 id="titulo_grafico">Clientes por Cidade</h5>
              </div>
              <div class="ibox-content padding-5">
                <div id="cliente_cidade" style="height: 300px !important;"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <%= render 'dashboards/resultados/clientes/tabela/tabela_efetivacoes' %>
      <%= render 'dashboards/resultados/clientes/tabela/tabela_desistencias' %>
    </div>
  </div>
</div>

<!-- Nova seção de Insights - Design inovador e tecnológico -->
<div class="col-lg-12 no-padding insights-section">
  <div class="insights-container" style="background: linear-gradient(135deg, rgba(250,252,255,0.5) 0%, rgba(245,248,255,0.95) 100%); border-radius: 12px; margin-bottom: 15px; position: relative; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.08), 0 1px 5px rgba(0,0,0,0.01); backdrop-filter: blur(10px);">
    
    <!-- Elementos decorativos flutuantes -->
    <div class="floating-elements" style="position: absolute; width: 100%; height: 100%; overflow: hidden; pointer-events: none; z-index: 0;">
      <div class="floating-circle" style="position: absolute; width: 300px; height: 300px; border-radius: 50%; background: linear-gradient(135deg, rgba(26,179,148,0.03) 0%, rgba(26,179,148,0.01) 100%); top: -150px; right: -100px; animation: float 15s infinite ease-in-out;"></div>
      <div class="floating-circle" style="position: absolute; width: 200px; height: 200px; border-radius: 50%; background: linear-gradient(135deg, rgba(237,85,101,0.03) 0%, rgba(237,85,101,0.01) 100%); bottom: -100px; left: -50px; animation: float 20s infinite ease-in-out reverse;"></div>
      <div class="floating-circle" style="position: absolute; width: 150px; height: 150px; border-radius: 50%; background: linear-gradient(135deg, rgba(28,132,198,0.025) 0%, rgba(28,132,198,0.01) 100%); top: 20px; left: 30%; animation: float 25s infinite ease-in-out;"></div>
    </div>
    
    <!-- Cabeçalho de Insights -->
    <div class="insights-header" style="display: flex; justify-content: space-between; align-items: center; padding: 16px 20px; border-bottom: 1px solid rgba(0,0,0,0.03); position: relative; z-index: 1;">
      <h4 style="margin: 0; font-size: 18px; font-weight: 600; color: #333; display: flex; align-items: center;">
        <i class="fa fa-lightbulb-o" style="margin-right: 10px; color: #f8ac59; position: relative;"></i>
        <span>INSIGHTS</span>
        <div class="pulse-ring" style="position: absolute; left: 10px; width: 14px; height: 14px; border-radius: 50%; background-color: rgba(248,172,89,0.2); transform: scale(1); animation: pulse-animation 2s infinite;"></div>
      </h4>
      
      <div style="display: flex; align-items: center;">
        <label style="margin-right: 10px; font-size: 13px; color: #666; font-weight: 600;">PERÍODO:</label>
        <select id="filtro_insights" style="border: none; background: rgba(255,255,255,0.8); box-shadow: 0 0 5px rgba(0,0,0,0.05); padding: 5px 10px; border-radius: 20px; font-size: 13px; color: #555; font-weight: 500; -webkit-appearance: none; -moz-appearance: none; appearance: none; padding-right: 25px; cursor: pointer; backdrop-filter: blur(5px);">
          <option value="ano_atual" selected>Ano Atual</option>
          <option value="3">3 Meses</option>
          <option value="6">6 Meses</option>
          <option value="12">12 Meses</option>
          <option value="24">24 Meses</option>
        </select>
        <i class="fa fa-chevron-down" style="position: relative; right: 20px; font-size: 10px; color: #999; pointer-events: none;"></i>
      </div>
    </div>
    
    <!-- Corpo dos Insights - Layout tecnológico -->
    <div class="insights-body" style="padding: 20px; display: flex; flex-wrap: wrap; position: relative; z-index: 1;">
      
      <!-- Métrica: Taxa de Desistência -->
      <div class="metric-container" style="flex: 1; min-width: 300px; margin: 0 10px 15px; position: relative;">
        <div class="metric-card" style="background: rgba(255,255,255,0.7); border-radius: 8px; padding: 0; height: 140px; position: relative; overflow: hidden; backdrop-filter: blur(5px); box-shadow: 0 5px 15px rgba(0,0,0,0.05); display: flex; flex-direction: column;">
          <!-- Barra superior colorida -->
          <div style="height: 5px; background: linear-gradient(90deg, #ed5565 0%, #ff9a9a 100%);"></div>
          
          <div style="display: flex; flex: 1; padding: 15px;">
            <!-- Lado esquerdo: título e indicadores -->
            <div style="flex: 1.5; display: flex; flex-direction: column; justify-content: space-between;">
              <div>
                <div style="display: flex; align-items: center; margin-bottom: 5px;">
                  <i class="fa fa-exclamation-triangle" style="color: #ed5565; margin-right: 8px; font-size: 16px;"></i>
                  <span style="font-size: 14px; color: #333; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Taxa de Desistência</span>
                </div>
                <div style="font-size: 12px; color: #888; margin-bottom: 10px;">% clientes que desistiram vs. total</div>
              </div>
              
              <div class="status-indicator" style="margin-top: auto; display: flex; align-items: center;">
                <div style="width: 8px; height: 8px; border-radius: 50%; background-color: #5cb85c; margin-right: 8px;"></div>
                <span id="status_desistencia" style="font-size: 13px; color: #666;">Dentro da meta</span>
              </div>
            </div>
            
            <!-- Lado direito: valor e tendência -->
            <div style="flex: 1; display: flex; flex-direction: column; align-items: flex-end; justify-content: space-between;">
              <div class="value-container" style="position: relative; text-align: right;">
                <div style="display: flex; align-items: center; margin-bottom: 5px;">
                  <span style="font-size: 36px; font-weight: 700; color: #ed5565; margin-bottom: 5px; line-height: 1;" id="taxa_desistencia">17.8%</span>
                  <span style="font-size: 14px; font-weight: 600; color: #5cb85c; margin-left: 10px; background: rgba(92, 184, 92, 0.1); padding: 2px 6px; border-radius: 4px;" id="variacao_desistencia">-5.6%</span>
                </div>
                <div class="shine-effect" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden;">
                  <div style="position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.8) 50%, transparent 100%); transform: skewX(-20deg); animation: shine 3s infinite;"></div>
                </div>
              </div>
              
              <div style="display: flex; flex-direction: column; align-items: flex-end;">
                <div id="trend_desistencia" style="display: inline-flex; align-items: center; padding: 3px 8px; background: rgba(92,184,92,0.1); border-radius: 4px; margin-bottom: 8px; font-size: 13px; color: #5cb85c; font-weight: 600;">
                  <i class="fa fa-check-circle" style="margin-right: 5px; font-size: 11px;"></i>Meta atingida
                </div>
                
                <div style="display: flex; align-items: center; width: 100%;">
                  <div style="flex: 1; height: 4px; background: rgba(0,0,0,0.05); border-radius: 2px; margin-right: 8px; position: relative; overflow: hidden;">
                    <div id="fill_desistencia" style="position: absolute; top: 0; left: 0; height: 100%; width: 74%; background: linear-gradient(90deg, #ed5565 0%, #ff9a9a 100%); border-radius: 2px;"></div>
                  </div>
                  <div style="font-size: 12px; color: #333; white-space: nowrap;">Meta: <span style="font-weight: 600;">&lt;40%</span></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Métrica: Taxa de Retenção -->
      <div class="metric-container" style="flex: 1; min-width: 300px; margin: 0 10px 15px; position: relative;">
        <div class="metric-card" style="background: rgba(255,255,255,0.7); border-radius: 8px; padding: 0; height: 140px; position: relative; overflow: hidden; backdrop-filter: blur(5px); box-shadow: 0 5px 15px rgba(0,0,0,0.05); display: flex; flex-direction: column;">
          <!-- Barra superior colorida -->
          <div style="height: 5px; background: linear-gradient(90deg, #1ab394 0%, #6be3c8 100%);"></div>
          
          <div style="display: flex; flex: 1; padding: 15px;">
            <!-- Lado esquerdo: título e indicadores -->
            <div style="flex: 1.5; display: flex; flex-direction: column; justify-content: space-between;">
              <div>
                <div style="display: flex; align-items: center; margin-bottom: 5px;">
                  <i class="fa fa-users" style="color: #1ab394; margin-right: 8px; font-size: 16px;"></i>
                  <span style="font-size: 14px; color: #333; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Taxa de Retenção</span>
                </div>
                <div style="font-size: 12px; color: #888; margin-bottom: 10px;">% clientes que permaneceram ativos</div>
              </div>
              
              <div class="status-indicator" style="margin-top: auto; display: flex; align-items: center;">
                <div style="width: 8px; height: 8px; border-radius: 50%; background-color: #5cb85c; margin-right: 8px;"></div>
                <span id="status_retencao" style="font-size: 13px; color: #666;">Acima da meta</span>
              </div>
            </div>
            
            <!-- Lado direito: valor e tendência -->
            <div style="flex: 1; display: flex; flex-direction: column; align-items: flex-end; justify-content: space-between;">
              <div class="value-container" style="position: relative; text-align: right;">
                <div style="display: flex; align-items: center; margin-bottom: 5px;">
                  <span style="font-size: 36px; font-weight: 700; color: #1ab394; margin-bottom: 5px; line-height: 1;" id="taxa_retencao">82.2%</span>
                  <span style="font-size: 14px; font-weight: 600; color: #5cb85c; margin-left: 10px; background: rgba(92, 184, 92, 0.1); padding: 2px 6px; border-radius: 4px;" id="variacao_retencao">+5.6%</span>
                </div>
                <div class="shine-effect" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden;">
                  <div style="position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.8) 50%, transparent 100%); transform: skewX(-20deg); animation: shine 3s infinite;"></div>
                </div>
              </div>
              
              <div style="display: flex; flex-direction: column; align-items: flex-end;">
                <div id="trend_retencao" style="display: inline-flex; align-items: center; padding: 3px 8px; background: rgba(92,184,92,0.1); border-radius: 4px; margin-bottom: 8px; font-size: 13px; color: #5cb85c; font-weight: 600;">
                  <i class="fa fa-check-circle" style="margin-right: 5px; font-size: 11px;"></i>Meta atingida
                </div>
                
                <div style="display: flex; align-items: center; width: 100%;">
                  <div style="flex: 1; height: 4px; background: rgba(0,0,0,0.05); border-radius: 2px; margin-right: 8px; position: relative; overflow: hidden;">
                    <div id="fill_retencao" style="position: absolute; top: 0; left: 0; height: 100%; width: 100%; background: linear-gradient(90deg, #1ab394 0%, #6be3c8 100%); border-radius: 2px;"></div>
                  </div>
                  <div style="font-size: 12px; color: #333; white-space: nowrap;">Meta: <span style="font-weight: 600;">&gt;70%</span></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Métrica: Comparativo Mensal -->
      <div class="metric-container" style="flex: 1; min-width: 300px; margin: 0 10px 15px; position: relative;">
        <div class="metric-card" style="background: rgba(255,255,255,0.7); border-radius: 8px; padding: 0; height: 140px; position: relative; overflow: hidden; backdrop-filter: blur(5px); box-shadow: 0 5px 15px rgba(0,0,0,0.05); display: flex; flex-direction: column;">
          <!-- Barra superior colorida -->
          <div style="height: 5px; background: linear-gradient(90deg, #1c84c6 0%, #54b2e5 100%);"></div>
          
          <div style="padding: 15px; display: flex; flex-direction: column; height: 100%;">
            <div style="display: flex; align-items: center; margin-bottom: 10px;">
              <i class="fa fa-area-chart" style="color: #1c84c6; margin-right: 8px; font-size: 16px;"></i>
              <span style="font-size: 14px; color: #333; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Comparativo Mensal</span>
              <span style="margin-left: auto; font-size: 12px; color: #1c84c6; background: rgba(28,132,198,0.1); padding: 2px 8px; border-radius: 10px;">Taxas de Retenção</span>
            </div>
            
            <!-- Gráfico de barras elegante -->
            <div class="monthly-chart" style="display: flex; align-items: flex-end; height: 60px; margin-top: 5px; margin-bottom: 5px;">
              <!-- Mês atual -->
              <div class="month-column" style="flex: 1; display: flex; flex-direction: column; align-items: center; position: relative;">
                <div style="text-align: center; width: 100%; position: absolute; bottom: 100%; margin-bottom: 5px;">
                  <span id="taxa_mes_atual" style="font-size: 12px; font-weight: 600; color: #1c84c6;">0.0%</span>
                </div>
                <div style="width: 65%; height: 100%; position: relative;">
                  <div id="fill_mes_atual" style="position: absolute; bottom: 0; left: 0; width: 100%; height: 0%; background: linear-gradient(180deg, #1c84c6 0%, #54b2e5 100%); border-radius: 3px 3px 0 0; box-shadow: 0 0 10px rgba(28,132,198,0.3);">
                    <div style="position: absolute; top: 0; left: 0; right: 0; height: 15%; background: rgba(255,255,255,0.2); border-radius: 3px 3px 0 0;"></div>
                  </div>
                </div>
                <div style="width: 100%; text-align: center; margin-top: 8px;">
                  <span style="font-size: 11px; color: #666; font-weight: 600;">Atual</span>
                </div>
              </div>
              
              <!-- Mês -1 -->
              <div class="month-column" style="flex: 1; display: flex; flex-direction: column; align-items: center; position: relative;">
                <div style="text-align: center; width: 100%; position: absolute; bottom: 100%; margin-bottom: 5px;">
                  <span id="taxa_mes_1" style="font-size: 12px; font-weight: 600; color: #888;">0.0%</span>
                </div>
                <div style="width: 65%; height: 100%; position: relative;">
                  <div id="fill_mes_1" style="position: absolute; bottom: 0; left: 0; width: 100%; height: 0%; background: rgba(28,132,198,0.7); border-radius: 3px 3px 0 0;">
                    <div style="position: absolute; top: 0; left: 0; right: 0; height: 15%; background: rgba(255,255,255,0.2); border-radius: 3px 3px 0 0;"></div>
                  </div>
                </div>
                <div style="width: 100%; text-align: center; margin-top: 8px;">
                  <span id="label_mes_1" style="font-size: 11px; color: #888;">Mês -1</span>
                </div>
              </div>
              
              <!-- Mês -2 -->
              <div class="month-column" style="flex: 1; display: flex; flex-direction: column; align-items: center; position: relative;">
                <div style="text-align: center; width: 100%; position: absolute; bottom: 100%; margin-bottom: 5px;">
                  <span id="taxa_mes_2" style="font-size: 12px; font-weight: 600; color: #888;">0.0%</span>
                </div>
                <div style="width: 65%; height: 100%; position: relative;">
                  <div id="fill_mes_2" style="position: absolute; bottom: 0; left: 0; width: 100%; height: 0%; background: rgba(28,132,198,0.5); border-radius: 3px 3px 0 0;">
                    <div style="position: absolute; top: 0; left: 0; right: 0; height: 15%; background: rgba(255,255,255,0.2); border-radius: 3px 3px 0 0;"></div>
                  </div>
                </div>
                <div style="width: 100%; text-align: center; margin-top: 8px;">
                  <span id="label_mes_2" style="font-size: 11px; color: #888;">Mês -2</span>
                </div>
              </div>
              
              <!-- Mês -3 -->
              <div class="month-column" style="flex: 1; display: flex; flex-direction: column; align-items: center; position: relative;">
                <div style="text-align: center; width: 100%; position: absolute; bottom: 100%; margin-bottom: 5px;">
                  <span id="taxa_mes_3" style="font-size: 12px; font-weight: 600; color: #888;">0.0%</span>
                </div>
                <div style="width: 65%; height: 100%; position: relative;">
                  <div id="fill_mes_3" style="position: absolute; bottom: 0; left: 0; width: 100%; height: 0%; background: rgba(28,132,198,0.3); border-radius: 3px 3px 0 0;">
                    <div style="position: absolute; top: 0; left: 0; right: 0; height: 15%; background: rgba(255,255,255,0.2); border-radius: 3px 3px 0 0;"></div>
                  </div>
                </div>
                <div style="width: 100%; text-align: center; margin-top: 8px;">
                  <span id="label_mes_3" style="font-size: 11px; color: #888;">Mês -3</span>
                </div>
              </div>
            </div>
            
            <div style="display: flex; align-items: center; justify-content: center; margin-top: auto;">
              <div style="padding: 3px 12px; border-radius: 12px; background: rgba(92,184,92,0.1); margin-top: 5px;">
                <span style="font-size: 12px; color: #5cb85c; font-weight: 500;">
                  <i class="fa fa-arrow-up" style="margin-right: 5px; font-size: 10px;"></i>Tendência positiva: +5.6% por mês
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Animação para elemento de pulso */
@keyframes pulse-animation {
  0% {
    box-shadow: 0 0 0 0 rgba(248,172,89,0.4);
    transform: scale(0.95);
  }
  70% {
    box-shadow: 0 0 0 12px rgba(248,172,89,0);
    transform: scale(1);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(248,172,89,0);
    transform: scale(0.95);
  }
}

/* Animação para efeito de brilho */
@keyframes shine {
  0% {
    left: -100%;
  }
  20% {
    left: 100%;
  }
  100% {
    left: 100%;
  }
}

/* Animação para elementos flutuantes */
@keyframes float {
  0% {
    transform: translatey(0px);
  }
  50% {
    transform: translatey(-20px);
  }
  100% {
    transform: translatey(0px);
  }
}

/* Animações específicas para cards */
.metric-card {
  transition: all 0.3s ease;
}

.metric-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 30px rgba(0,0,0,0.1);
}

/* Estilo para gráfico de barras */
.monthly-chart .month-column:hover {
  transform: translateY(-3px);
}

.monthly-chart .month-column {
  transition: all 0.3s ease;
}

/* Override para elementos legacy que possam afetar o layout */
.insights-section .row {
  margin-left: -10px;
  margin-right: -10px;
}

.tooltip-tendencia {
  max-width: 360px !important;
  z-index: 9999 !important;
}
.tooltip-tendencia .tooltip-inner,
.tooltip-tendencia .popover-content {
  max-width: 360px !important;
  background-color: #2f4050;
  padding: 15px;
  font-size: 12px;
  line-height: 1.6;
  text-align: left;
  color: #fff;
}
.popover.tooltip-tendencia {
  max-width: 360px !important;
  background-color: #2f4050;
  border-color: #1c2b36;
}
.popover.tooltip-tendencia .arrow:after {
  border-bottom-color: #2f4050;
}
.tooltip-titulo {
  font-size: 14px;
  font-weight: 600;
  margin-bottom: 10px;
  color: #fff;
  border-bottom: 1px solid rgba(255,255,255,0.2);
  padding-bottom: 5px;
}
.tooltip-linha {
  display: flex;
  justify-content: space-between;
  margin-bottom: 5px;
}
.tooltip-linha span {
  color: rgba(255,255,255,0.8);
}
.tooltip-linha strong {
  color: #fff;
  font-weight: 600;
}
.tooltip-linha-divisor {
  height: 1px;
  background: rgba(255,255,255,0.2);
  margin: 8px 0;
}
.tooltip-descricao {
  margin-top: 10px;
  font-size: 11px;
  color: rgba(255,255,255,0.7);
  line-height: 1.5;
}
.projecao-valor {
  font-weight: 700;
  font-size: 14px;
}
.projecao-info-icon {
  cursor: pointer;
  transition: all 0.2s ease;
}
.projecao-info-icon:hover {
  opacity: 1 !important;
  transform: scale(1.2);
}
</style>

<script>
  // Variável global para armazenar os dados mensais
  var dadosMensaisHistorico = [];
  
  $(document).ready(function(){
    console.log("Inicializando painel Efetivações x Desistências");
    
    try {
      console.log("Carregando dados iniciais...");
      
      // Testar a API para verificar se está funcionando
      setTimeout(function() {
        testarAPIEfetivacoes();
      }, 1500);
      
      // Carregar dados principais
      drawEfetivacoesDesativacoesReal();
      
      // Sincronizar opções do filtro de insights com o filtro de período do saldo
      var opcoesFiltroPeriodo = $('#filtro_periodo_saldo option').clone();
      $('#filtro_insights').empty().append(opcoesFiltroPeriodo);
      
      // Garantir que o valor inicial seja o mesmo nos dois filtros
      var valorInicial = $('#filtro_periodo_saldo').val() || "ano_atual";
      $('#filtro_insights').val(valorInicial);
      console.log("Valor inicial do filtro:", valorInicial);
      
      // Monitorar mudanças nos filtros de empresa e estado
      $('#empresas_financeiro_id, #estado_financeiro_id').off('change').on('change', function() {
        console.log("Filtro de empresa ou estado alterado, atualizando insights");
        var periodoAtual = $('#filtro_insights').val() || "ano_atual";
        
        // Dar um delay curto para permitir que outros handlers sejam executados
        setTimeout(function() {
          atualizarInsights(periodoAtual);
        }, 500);
      });
      
      // Inicializar o filtro de período com callback para atualizar os insights também
      $('#filtro_periodo_saldo').off('change').on('change', function() {
        var periodo = $(this).val();
        console.log("Filtro de período alterado:", periodo);
        
        // Atualizar saldo acumulado
        calcularSaldoPorPeriodo(periodo);
        
        // Sincronizar o valor com o filtro de insights e atualizar
        $('#filtro_insights').val(periodo);
        
        // Forçar atualização dos insights
        setTimeout(function() {
          console.log("Atualizando insights após mudança no filtro de período");
          atualizarInsights(periodo);
        }, 100);
      });
      
      // Inicializar o filtro de tipo de gráfico
      $('#filtro_tipo_grafico').off('change').on('change', function() {
        console.log("Filtro tipo de gráfico alterado:", $(this).val());
        
        if ($('#filtro_tipo_grafico').val() == 1) {
          document.getElementById("titulo_grafico_bars").innerHTML = "Efetivações x Desistências";
          drawEfetivacoesDesativacoesReal();
        } else if ($('#filtro_tipo_grafico').val() == 3) {
          document.getElementById("titulo_grafico_bars").innerHTML = "Pagamento 2º honorário";
          drawEfetivacoesDesativacoes2meses(2);
        } else if ($('#filtro_tipo_grafico').val() == 4) {
          document.getElementById("titulo_grafico_bars").innerHTML = "Pagamento 3º honorário";
          drawEfetivacoesDesativacoes2meses(3);
        } else {
          document.getElementById("titulo_grafico_bars").innerHTML = "Novos honorários x honorários baixados";
          drawEfetivacoesDesativacoes();
        }
        
        // Atualizar o gráfico secundário com base no filtro atual
        atualizarGraficoSecundario();
        
        // Atualizar também os insights com o período atual
        var periodoAtual = $('#filtro_insights').val() || "ano_atual";
        setTimeout(function() {
          atualizarInsights(periodoAtual);
        }, 500);
      });
      
      // Função para atualizar o gráfico secundário
      function atualizarGraficoSecundario() {
        console.log("Atualizando gráfico secundário com base no filtro:", $('#filtro_grafico_efet_des').val());
        
        if ($('#filtro_grafico_efet_des').val() == 1) {
          document.getElementById("titulo_grafico").innerHTML = "Clientes por cidade";
          document.getElementById("desc_compt_eft_dest").innerHTML = "Atual";
          drawTableClientesCidades();
        } else if ($('#filtro_grafico_efet_des').val() == 2) {
          document.getElementById("titulo_grafico").innerHTML = "Efetivações";
          document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
          if ($('#filtro_tipo_grafico').val() == 1)
            drawChartDesistenciasReal("ATIVAS");
          else
            drawChartDesistencias("ATIVAS");
        } else if ($('#filtro_grafico_efet_des').val() == 3) {
          document.getElementById("titulo_grafico").innerHTML = "Desistências";
          document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
          if ($('#filtro_tipo_grafico').val() == 1)
            drawChartDesistenciasReal("INATIVAS");
          else
            drawChartDesistencias("INATIVAS");
        } else if ($('#filtro_grafico_efet_des').val() == 4) {
          document.getElementById("titulo_grafico").innerHTML = "Efetivações";
          document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
          if ($('#filtro_tipo_grafico').val() == 1)
            drawTabelaEfetivacoesDesistenciasReal("ATIVAS");
          else
            drawTabelaEfetivacoesDesistencias("ATIVAS");
        } else if ($('#filtro_grafico_efet_des').val() == 6) {
          document.getElementById("titulo_grafico").innerHTML = "Efetivações";
          document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
          if ($('#filtro_tipo_grafico').val() == 1)
            drawEfetivacoesDesistenciasPorUF(4);
          else
            drawEfetivacoesDesistenciasPorUF(5);
        } else {
          document.getElementById("titulo_grafico").innerHTML = "Desistências";
          document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
          if ($('#filtro_tipo_grafico').val() == 1)
            drawTabelaEfetivacoesDesistenciasReal("INATIVAS");
          else
            drawTabelaEfetivacoesDesistencias("INATIVAS");
        }
      }
      
      // Listener para o filtro de gráfico de efetivações/desistências
      $('#grafico_por_efet_des').off('change').on('change', function() {
        console.log("Filtro gráfico efetivações/desistências alterado:", $(this).val());
        atualizarGraficoSecundario();
      });
      
      // Event listener para o filtro de insights - usar off antes de on para evitar múltiplos handlers
      $('#filtro_insights').off('change').on('change', function() {
        var periodo = $(this).val();
        console.log("Filtro insights alterado para:", periodo);
        
        // Sincronizar o filtro de período do saldo com o filtro de insights
        $('#filtro_periodo_saldo').val(periodo);
        
        // Atualizar saldo acumulado
        calcularSaldoPorPeriodo(periodo);
        
        // Forçar atualização dos insights com delay mínimo para garantir que o valor foi alterado
        setTimeout(function() {
          console.log("Executando atualizarInsights com período:", periodo);
          atualizarInsights(periodo);
        }, 100);
      });
      
      // Atualizar insights quando o botão de atualizar do dashboard for clicado
      $('#btnAtualizarPaineis').off('click').on('click', function() {
        console.log("Botão de atualizar painéis clicado");
        var valorAtual = $('#filtro_insights').val() || "ano_atual";
        console.log("Atualizando insights com filtro:", valorAtual);
        atualizarInsights(valorAtual);
      });
      
      // Assegurar que os listeners sejam aplicados corretamente
      function corrigirComportamentoChosen() {
        console.log("Corrigindo comportamento dos filtros");
        
        // Reconfigurar eventos para chosen-select se estiver sendo usado
        if ($.fn.chosen) {
          $('.chosen-select').trigger('chosen:updated');
          
          // Configurar eventos específicos para chosen
          $('#filtro_insights').chosen().on('change', function() {
            var periodo = $(this).val();
            console.log("Chosen change no filtro insights:", periodo);
            
            // Atualizar insights
            setTimeout(function() {
              atualizarInsights(periodo);
            }, 100);
          });
        }
      }
      
      // Inicializar o filtro de insights após um breve delay
      setTimeout(function() {
        console.log("Inicializando o filtro de insights");
        
        // Verificar se o elemento existe
        if ($('#filtro_insights').length > 0) {
          console.log("Elemento filtro_insights encontrado");
          corrigirComportamentoChosen();
          
          // Inicializar insights com o valor padrão
          var valorInicial = $("#filtro_insights").val() || "ano_atual";
          console.log("Inicializando insights com valor:", valorInicial);
          
          // Forçar atualização dos insights
          atualizarInsights(valorInicial);
        } else {
          console.error("Elemento filtro_insights não encontrado!");
        }
      }, 1000);
      
      console.log("Inicialização concluída com sucesso");
    } catch (err) {
      console.error("Erro durante a inicialização:", err);
    }
  });

    function drawTableClientesCidades() {
        $.getJSON("/dashboards/get_clientes_ativos_cidade?order=QTD&empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val(), function(data) {
            var datatable = new google.visualization.DataTable();
            datatable.addColumn('string', 'Nome');
            datatable.addColumn('number', 'Quant.');

            for (var i = 0; i < data.length; i++) {
                datatable.addRow([data[i].nome, parseInt(data[i].quantidade)]);
            }

            var table = new google.visualization.Table(document.getElementById('cliente_cidade'));

            table.draw(datatable, {allowHtml: true, width: '100%', height: '100%'});
        });
    }

    function drawEfetivacoesDesativacoes() {
        // Não é mais necessário limpar cards separados
        // $('.saldo-acumulado-container').remove();
        // $('#saldo_acumulado_card').remove();
        // $('#saldo_acumulado_container').empty();
        
        $.getJSON("/dashboards/get_efetivacoes_desativacoes?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val(), function(data) {
            var dataArray = [
                ['Mês', 'Efetivações', {type: 'string', role: 'annotation'}, 'Desistencias',
                    {type: 'string', role: 'annotation'}, 'Valor Efetivações', 'Média Efetivações',
                    'Valor Desistências', 'Média Desistências', 'Valor Saldo', 'Quantidade Saldo', 'Média Saldo'],
            ];

            for (var i = 0; i < data.length; i++) {
                var row = [data[i].data, parseInt(data[i].quantidadeefetivacoes), parseInt(data[i].quantidadeefetivacoes),
                    parseInt(data[i].quantidadeinativos), parseInt(data[i].quantidadeinativos),  parseFloat(data[i].valorefetivacoes),
                    parseFloat(data[i].mediaefetivacoes), parseFloat(data[i].valorinativos), parseFloat(data[i].mediainativos),
                    parseFloat(data[i].saldo_total), parseInt(data[i].saldo_quantidade), parseFloat(data[i].saldo_media)];
                dataArray.push(row);
            }

            if(data.length > 0){
                preencherEfetivacoesDesistencias($(data).get(-1).data, $(data).get(-1).quantidadeefetivacoes, mascaraValor($(data).get(-1).valorefetivacoes),
                    mascaraValor($(data).get(-1).mediaefetivacoes), $(data).get(-1).quantidadeinativos, mascaraValor($(data).get(-1).valorinativos),
                    mascaraValor($(data).get(-1).mediainativos), $(data).get(-1).saldo_quantidade, mascaraValor($(data).get(-1).saldo_total),
                    mascaraValor($(data).get(-1).saldo_media));
            }else{
                preencherEfetivacoesDesistencias('', 0, mascaraValor('0.00'),
                    mascaraValor('0.00'), 0, mascaraValor('0.00'),
                    mascaraValor('0.00'), 0, mascaraValor('0.00'),
                    mascaraValor('0.00'));
            }

            var options = {
                'chartArea': {'width': '100%', 'height': '90%'},
                vAxis: {title: 'Quant.'},
                hAxis: {title: 'Mês', textStyle: {fontSize: 9, color: 'blue'}},
                seriesType: 'bars',
                isStacked: true,
                legend: {position: 'top'},
                animation: { easing: 'inAndOut', duration: 500, startup: true, displayLegendValues: false}
            };
            var chart = new google.visualization.ComboChart(document.getElementById('efetivacoes_desistencias_12_meses'));

            function selectHandler() {
                var selectedItem = chart.getSelection()[0];
                $('#bloco_efetivacoes_financeiro').hide();
                if (selectedItem) {
                    preencherEfetivacoesDesistencias(data.getValue(selectedItem.row, 0), data.getValue(selectedItem.row, 1), mascaraValor(data.getValue(selectedItem.row, 5).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 6).toFixed(2)), data.getValue(selectedItem.row, 4), mascaraValor(data.getValue(selectedItem.row, 7).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 8).toFixed(2)), data.getValue(selectedItem.row, 10), mascaraValor(data.getValue(selectedItem.row, 9).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 11).toFixed(2)));
                  
                  if(selectedItem['column'] == 1 && ($('#filtro_grafico_efet_des').val() == 2 || $('#filtro_grafico_efet_des').val() == 3)) { //grafico
                    drawChartDesistencias("ATIVAS");
                    $('#filtro_grafico_efet_des').val(2);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if(selectedItem['column'] == 1 && ($('#filtro_grafico_efet_des').val() == 1 || $('#filtro_grafico_efet_des').val() == 4 || $('#filtro_grafico_efet_des').val() == 5)) { //tabela
                    drawTabelaEfetivacoesDesistencias("ATIVAS");
                    $('#filtro_grafico_efet_des').val(4);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if(selectedItem['column'] == 1 && $('#filtro_grafico_efet_des').val() == 6) { //tabela por uf efetivacoes
                    drawEfetivacoesDesistenciasPorUF(4);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }
                  else if($('#filtro_grafico_efet_des').val() == 1 || $('#filtro_grafico_efet_des').val() == 4 || $('#filtro_grafico_efet_des').val() == 5) { //tabela
                    drawTabelaEfetivacoesDesistencias("INATIVAS");
                    $('#filtro_grafico_efet_des').val(4);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if($('#filtro_grafico_efet_des').val() == 6) { //tabela por uf desativacoes
                    drawEfetivacoesDesistenciasPorUF(5);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else{ //grafico
                    drawChartDesistencias("INATIVAS");
                    $('#filtro_grafico_efet_des').val(3);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }
                }else{
                    preencherEfetivacoesDesistencias(data.getValue(data.jc.length-1, 0), data.getValue(data.jc.length-1, 1), mascaraValor(data.getValue(data.jc.length-1, 8).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 9).toFixed(2)), data.getValue(data.jc.length-1, 4), mascaraValor(data.getValue(data.jc.length-1, 10).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 11).toFixed(2)), data.getValue(data.jc.length-1, 13), mascaraValor(data.getValue(data.jc.length-1, 12).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 14).toFixed(2)));
                }
            }

            google.visualization.events.addListener(chart, 'select', selectHandler);

            var data = google.visualization.arrayToDataTable(dataArray);

            chart.draw(data, options);

            view = new google.visualization.DataView(data);
            view.hideColumns([8,9,10,11,12,13,14]);
            chart.draw(view, options);
        });
    }

    function drawEfetivacoesDesativacoesReal() {
        // Não é mais necessário limpar o container que removemos
        // $('#saldo_acumulado_container').empty();
        
        $.getJSON("/dashboards/get_efetivacoes_desativacoesReal?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val(), function(data) {
            var dataArray = [
                ['Mês', 'Efetivações', {type: 'string', role: 'annotation'}, 'Desistencias',
                    {type: 'string', role: 'annotation'}, 'Saldo', {type: 'string', role: 'annotation'}, 
                    {type: 'string', role: 'style'}, 'Valor Efetivações', 'Média Efetivações',
                    'Valor Desistências', 'Média Desistências', 'Valor Saldo', 'Quantidade Saldo', 'Média Saldo'],
            ];

            // Calcular saldo acumulado
            var saldoAcumulado = 0;
            var totalEfetivacoes = 0;
            var totalDesistencias = 0;

            for (var i = 0; i < data.length; i++) {
                var saldoMes = parseInt(data[i].quantidadeefetivacoes) - parseInt(data[i].quantidadeinativos);
                saldoAcumulado += saldoMes;
                totalEfetivacoes += parseInt(data[i].quantidadeefetivacoes);
                totalDesistencias += parseInt(data[i].quantidadeinativos);
                
                var saldoEstilo = saldoMes >= 0 ? 'color: green' : 'color: red';
                
                var row = [data[i].data, 
                           parseInt(data[i].quantidadeefetivacoes), 
                           parseInt(data[i].quantidadeefetivacoes),
                           parseInt(data[i].quantidadeinativos), 
                           parseInt(data[i].quantidadeinativos),
                           saldoMes,
                           saldoMes.toString(),
                           saldoEstilo,
                           parseFloat(data[i].valorefetivacoes),
                           parseFloat(data[i].mediaefetivacoes), 
                           parseFloat(data[i].valorinativos), 
                           parseFloat(data[i].mediainativos),
                           parseFloat(data[i].saldo_total), 
                           parseInt(data[i].saldo_quantidade), 
                           parseFloat(data[i].saldo_media)];
                dataArray.push(row);
            }

            if(data.length > 0){
                // Preencher cards de efetivações, desistências e saldo
                preencherEfetivacoesDesistencias($(data).get(-1).data, $(data).get(-1).quantidadeefetivacoes, mascaraValor($(data).get(-1).valorefetivacoes),
                    mascaraValor($(data).get(-1).mediaefetivacoes), $(data).get(-1).quantidadeinativos, mascaraValor($(data).get(-1).valorinativos),
                    mascaraValor($(data).get(-1).mediainativos), $(data).get(-1).saldo_quantidade, mascaraValor($(data).get(-1).saldo_total),
                    mascaraValor($(data).get(-1).saldo_media));
                    
                // Adicionar card de saldo acumulado
                atualizarSaldoAcumulado(totalEfetivacoes, totalDesistencias);
                
                // Atualizar título do gráfico
                var saldoTotal = totalEfetivacoes - totalDesistencias;
                $('#titulo_grafico_bars').html('Efetivações x Desistências <span style="color:' + (saldoTotal >= 0 ? 'green' : 'red') + ';">(Saldo: ' + saldoTotal + ')</span>');
            }else{
                preencherEfetivacoesDesistencias('', 0, mascaraValor('0.00'),
                    mascaraValor('0.00'), 0, mascaraValor('0.00'),
                    mascaraValor('0.00'), 0, mascaraValor('0.00'),
                    mascaraValor('0.00'));
                
                // Criar card vazio de saldo acumulado
                atualizarSaldoAcumulado(0, 0);
                
                $('#titulo_grafico_bars').text('Efetivações x Desistências');
            }

            var options = {
                'chartArea': {'width': '100%', 'height': '90%'},
                vAxis: {title: 'Quant.'},
                hAxis: {title: 'Mês', textStyle: {fontSize: 9, color: 'blue'}},
                seriesType: 'bars',
                isStacked: false,
                legend: {position: 'top'},
                animation: { easing: 'inAndOut', duration: 500, startup: true, displayLegendValues: false},
                series: {
                    0: {color: '#4285F4'}, // Efetivações - Azul
                    1: {color: '#DB4437'}, // Desistências - Vermelho
                    2: {type: 'line', color: '#0F9D58', lineWidth: 2, pointSize: 5} // Saldo - Verde (linha)
                }
            };
            
            var chart = new google.visualization.ComboChart(document.getElementById('efetivacoes_desistencias_12_meses'));

            function selectHandler() {
                var selectedItem = chart.getSelection()[0];
                $('#bloco_efetivacoes_financeiro').hide();
                if (selectedItem) {
                    preencherEfetivacoesDesistencias(data.getValue(selectedItem.row, 0), data.getValue(selectedItem.row, 1), mascaraValor(data.getValue(selectedItem.row, 8).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 9).toFixed(2)), data.getValue(selectedItem.row, 4), mascaraValor(data.getValue(selectedItem.row, 10).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 11).toFixed(2)), data.getValue(selectedItem.row, 13), mascaraValor(data.getValue(selectedItem.row, 12).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 14).toFixed(2)));

                  if(selectedItem['column'] == 1 && ($('#filtro_grafico_efet_des').val() == 2 || $('#filtro_grafico_efet_des').val() == 3)) { //grafico
                    drawChartDesistenciasReal("ATIVAS");
                    $('#filtro_grafico_efet_des').val(2);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if(selectedItem['column'] == 1 && ($('#filtro_grafico_efet_des').val() == 1 || $('#filtro_grafico_efet_des').val() == 4 || $('#filtro_grafico_efet_des').val() == 5)) { //tabela
                    drawTabelaEfetivacoesDesistenciasReal("ATIVAS");
                    $('#filtro_grafico_efet_des').val(4);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if(selectedItem['column'] == 1 && $('#filtro_grafico_efet_des').val() == 6) { //tabela UF ativos
                    drawEfetivacoesDesistenciasPorUF(2);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if($('#filtro_grafico_efet_des').val() == 1 || $('#filtro_grafico_efet_des').val() == 4 || $('#filtro_grafico_efet_des').val() == 5) { //tabela
                    drawTabelaEfetivacoesDesistenciasReal("INATIVAS");
                    $('#filtro_grafico_efet_des').val(4);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if($('#filtro_grafico_efet_des').val() == 6) { //tabela UF desistentes
                    drawEfetivacoesDesistenciasPorUF(3);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else{ //grafico
                    drawChartDesistenciasReal("INATIVAS");
                    $('#filtro_grafico_efet_des').val(3);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }
                }else{
                    preencherEfetivacoesDesistencias(data.getValue(data.jc.length-1, 0), data.getValue(data.jc.length-1, 1), mascaraValor(data.getValue(data.jc.length-1, 8).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 9).toFixed(2)), data.getValue(data.jc.length-1, 4), mascaraValor(data.getValue(data.jc.length-1, 10).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 11).toFixed(2)), data.getValue(data.jc.length-1, 13), mascaraValor(data.getValue(data.jc.length-1, 12).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 14).toFixed(2)));
                }
            }

            google.visualization.events.addListener(chart, 'select', selectHandler);

            var data = google.visualization.arrayToDataTable(dataArray);

            // Desenhar o gráfico
            chart.draw(data, options);
            
            view = new google.visualization.DataView(data);
            view.hideColumns([8,9,10,11,12,13,14]);
            chart.draw(view, options);
        });
    }

    // Adicionar função para atualizar o saldo acumulado
    function atualizarSaldoAcumulado(totalEfetivacoes, totalDesistencias) {
        var saldoAcumulado = totalEfetivacoes - totalDesistencias;
        var saldoClass = saldoAcumulado >= 0 ? "" : "redcolor";
        
        // Atualizar os valores no card existente dentro do container principal
        $('#saldo_acumulado_quantidade').text('Total ' + saldoAcumulado);
        
        // Adicionar/remover a classe redcolor dependendo do saldo
        if (saldoAcumulado >= 0) {
            $('#saldo_acumulado_quantidade, #saldo_acumulado_valor, #saldo_acumulado_media').removeClass('redcolor');
        } else {
            $('#saldo_acumulado_quantidade, #saldo_acumulado_valor, #saldo_acumulado_media').addClass('redcolor');
        }
        
        // Calcular o saldo acumulado inicialmente
        calcularSaldoPorPeriodo('ano_atual');
    }
    
    // Função para calcular saldo por período selecionado
    function calcularSaldoPorPeriodo(meses) {
        $.getJSON("/dashboards/get_efetivacoes_desativacoesReal?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val(), function(data) {
            if(data.length > 0) {
                var totalEfetivacoes = 0;
                var totalDesistencias = 0;
                var totalValorEfetivacoes = 0;
                var totalValorDesistencias = 0;
                
                // Identificar o período conforme seleção
                var periodoFinal;
                var periodoInicial = 0;
                
                if (meses === 'ano_atual') {
                    // Ano atual - filtrar dados apenas do ano corrente
                    var anoAtual = new Date().getFullYear();
                    for (var i = 0; i < data.length; i++) {
                        // Extrair o ano do campo data (formato MM/AAAA)
                        var anoData = parseInt(data[i].data.split('/')[1]);
                        if (anoData === anoAtual) {
                            if (periodoInicial === 0) {
                                periodoInicial = i;
                            }
                            periodoFinal = i + 1;
                        }
                    }
                    
                    // Se não encontrou dados do ano atual, usar todos os dados
                    if (periodoInicial === 0) {
                        periodoInicial = 0;
                        periodoFinal = data.length;
                    }
                } else {
                    // Número específico de meses - limitar à quantidade de dados disponíveis
                    periodoInicial = 0;
                    periodoFinal = Math.min(data.length, parseInt(meses));
                }
                
                // Calcular os totais para o período selecionado
                for (var i = periodoInicial; i < periodoFinal; i++) {
                    totalEfetivacoes += parseInt(data[i].quantidadeefetivacoes);
                    totalDesistencias += parseInt(data[i].quantidadeinativos);
                    totalValorEfetivacoes += parseFloat(data[i].valorefetivacoes);
                    totalValorDesistencias += parseFloat(data[i].valorinativos);
                }
                
                var saldoAcumulado = totalEfetivacoes - totalDesistencias;
                var saldoValor = totalValorEfetivacoes - totalValorDesistencias;
                
                // Calcular a média dividindo pelo número de meses considerados
                var numeroMeses = periodoFinal - periodoInicial;
                var saldoMedia = numeroMeses > 0 ? saldoValor / numeroMeses : 0;
                
                var saldoClass = saldoAcumulado >= 0 ? "" : "redcolor";
                
                // Atualizar valores no card
                $('#saldo_acumulado_quantidade').text('Total ' + saldoAcumulado);
                $('#saldo_acumulado_valor').text(mascaraValor(saldoValor.toFixed(2)));
                $('#saldo_acumulado_media').text('Média ' + mascaraValor(saldoMedia.toFixed(2)));
                
                // Atualizar classes para colorir em vermelho quando negativo
                if (saldoAcumulado >= 0) {
                    $('#saldo_acumulado_quantidade, #saldo_acumulado_valor, #saldo_acumulado_media').removeClass('redcolor');
                } else {
                    $('#saldo_acumulado_quantidade, #saldo_acumulado_valor, #saldo_acumulado_media').addClass('redcolor');
                }
            } else {
                $('#saldo_acumulado_quantidade').text('Total 0');
                $('#saldo_acumulado_valor').text(mascaraValor('0.00'));
                $('#saldo_acumulado_media').text('Média ' + mascaraValor('0.00'));
            }
        });
    }

    function drawChartDesistencias(tipo) {
      $.getJSON("/dashboards/get_efetivacoes_desativacoes_sistema?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() +
            "&data=" + $('#compentencia_cliente_desativacoes').text() +
            "&tipo=" + tipo, function(data) {
            
        var dataArray = [
            ['Sistema', 'Quantidade'],
        ];
        dataArray.push(['Manager', parseInt(data["manager"])]);
        dataArray.push(['Light', parseInt(data["light"])]);
        dataArray.push(['Emissor', parseInt(data["emissor"])]);
        //dataArray.push(['Fiscal', parseInt(data["fiscal"])]);
        dataArray.push(['Gourmet', parseInt(data["gourmet"])]);
        dataArray.push(['Pró vendas', parseInt(data["pro"])]);
        dataArray.push(['Athus', parseInt(data["athus"])]);
        dataArray.push(['Trade', parseInt(data["trade"])]);
        dataArray.push(['Emissor WEB', parseInt(data["emissor_web"])]);
        dataArray.push(['Híbridos', parseInt(data["hibridos"])]);
        dataArray.push(['Sem sistemas', parseInt(data["sem_sistema"])]); 

        var options = {
            'chartArea': {'width': '100%', 'height': '90%'},
            pieStartAngle: 50,
            legend: {position: 'bottom', textStyle: {fontSize: 10}},
            is3D: true
        };

        var chart = new google.visualization.PieChart(document.getElementById('cliente_cidade'));
        var data = google.visualization.arrayToDataTable(dataArray);

        chart.draw(data, options);
      });
    }

    function preencherEfetivacoesDesistencias(competencia, quantidadeEfetivacoes, valorEfetivacoes, mediaEfetivacoes, quantidadeDesistencia,
                                              valorDesistencia, mediaDesistencia, quantidadeSaldo, valorSaldo, mediaSaldo) {
        $('#efetivacoes_quantidade').text('Total ' + quantidadeEfetivacoes);
        $('#efetivacoes_valor').text(valorEfetivacoes);
        $('#media_efetivacoes').text('Média ' + mediaEfetivacoes);
        $('#compentencia_cliente_efetivacoes').text(competencia);

        $('#desativacoes_quantidade').text('Total ' + quantidadeDesistencia);
        $('#desativacoes_valor').text(valorDesistencia);
        $('#desativacoes_valor_media').text('Média ' + mediaDesistencia);
        $('#compentencia_cliente_desativacoes').text(competencia);

        $('#saldo_quantidade').text('Total ' + quantidadeSaldo);
        $('#saldo_valor').text(valorSaldo);
        $('#saldo_media').text('Média ' + mediaSaldo);
        $('#compentencia_cliente_saldo').text(competencia);
        if(valorSaldo.includes('-')){
            $('#saldo_quantidade').addClass('redcolor');
            $('#saldo_valor').addClass('redcolor');
            $('#saldo_media').addClass('redcolor');
        }else{
            $('#saldo_quantidade').removeClass('redcolor');
            $('#saldo_valor').removeClass('redcolor');
            $('#saldo_media').removeClass('redcolor');
        }
    }

    function carregarInfoEfetivacoesFinanceiro() {
        $('#bloco_desistencias_financeiro').hide();
        if($('#bloco_efetivacoes_financeiro').is(':visible')){
            $('#bloco_efetivacoes_financeiro').hide();
        }else if ($('#filtro_tipo_grafico').val() == 2) {
            $.getJSON("/dashboards/table_efetivacoes_financeiro?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_debito=1" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_efetivacoes').text(), function(data) {
                $('#bloco_efetivacoes_financeiro').show();
                var table = $('.table-efetivacoes-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datainicial']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        val['razaosocial'],
                        val['municipio'] + '-' + val['sigla'],
                        val['sistema'],
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valor'])
                    ] ).draw( false );
                });
            });
        }else if ($('#filtro_tipo_grafico').val() == 1) {
            $.getJSON("/dashboards/table_efetivacoes_financeiroReal?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_debito=1" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_efetivacoes').text(), function(data) {
                $('#bloco_efetivacoes_financeiro').show();
                var table = $('.table-efetivacoes-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datavencimento']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        val['razaosocial'],
                        val['estado'],
                        val['sistema'], //sistema
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valormensalidade'])
                    ] ).draw( false );
                });
            });
        }else if ($('#filtro_tipo_grafico').val() == 3) {
            $.getJSON("/dashboards/table_efetivacoes_financeiroReal?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_debito=2" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_efetivacoes').text(), function(data) {
                $('#bloco_efetivacoes_financeiro').show();
                var table = $('.table-efetivacoes-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datavencimento']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        val['razaosocial'],
                        val['estado'],
                        val['sistema'], //sistema
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valormensalidade'])
                    ] ).draw( false );
                });
            });
        }else if ($('#filtro_tipo_grafico').val() == 4) {
            $.getJSON("/dashboards/table_efetivacoes_financeiroReal?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_debito=3" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_efetivacoes').text(), function(data) {
                $('#bloco_efetivacoes_financeiro').show();
                var table = $('.table-efetivacoes-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datavencimento']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        val['razaosocial'],
                        val['estado'],
                        val['sistema'], //sistema
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valormensalidade'])
                    ] ).draw( false );
                });
            });
        }
    }

    function carregarInfoDesistenciasFinanceiro() {
        $('#bloco_efetivacoes_financeiro').hide();
        if($('#bloco_desistencias_financeiro').is(':visible')){
            $('#bloco_desistencias_financeiro').hide();
        }else if ($('#filtro_tipo_grafico').val() == 2) {
            $.getJSON("/dashboards/table_desistencia_financeiro?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_mes=1" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_desativacoes').text(), function(data) {
                $('#bloco_desistencias_financeiro').show();
                var table = $('.table-desistencias-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datainativacao']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        moment(val['datainicial']).format("DD/MM/YYYY"),
                        val['dias_cliente'],
                        val['razaosocial'],
                        val['municipio'] + '-' + val['sigla'],
                        val['sistema'],
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valor']),
                        val['motivo']
                    ] ).draw( false );
                });
            });
        }else if ($('#filtro_tipo_grafico').val() == 1) {
            $.getJSON("/dashboards/table_desistencia_financeiroReal?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_mes=1" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_desativacoes').text(), function(data) {
                $('#bloco_desistencias_financeiro').show();
                var table = $('.table-desistencias-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datainativacao']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        moment(val['datainicial']).format("DD/MM/YYYY"),
                        val['dias_cliente'],
                        val['razaosocial'],
                        val['municipio'] + '-' + val['sigla'],
                        val['sistema'],
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valor']),
                        val['motivo']
                    ] ).draw( false );
                });
            });
        }else if ($('#filtro_tipo_grafico').val() == 3) {
            $.getJSON("/dashboards/table_desistencia_financeiroReal?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_mes=2" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_desativacoes').text(), function(data) {
                $('#bloco_desistencias_financeiro').show();
                var table = $('.table-desistencias-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datainativacao']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        moment(val['datainicial']).format("DD/MM/YYYY"),
                        val['dias_cliente'],
                        val['razaosocial'],
                        val['municipio'] + '-' + val['sigla'],
                        val['sistema'],
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valor']),
                        val['motivo']
                    ] ).draw( false );
                });
            });
        }else if ($('#filtro_tipo_grafico').val() == 4) {
            $.getJSON("/dashboards/table_desistencia_financeiroReal?empresa=" + $('#empresas_financeiro_id').val() +
                "&qtd_mes=3" +
                "&estado=" + $('#estado_financeiro_id').val() +
                "&data=" + $('#compentencia_cliente_desativacoes').text(), function(data) {
                $('#bloco_desistencias_financeiro').show();
                var table = $('.table-desistencias-financeiro').DataTable();
                table.clear().draw();
                $.each(data,function (i,val){
                    table.row.add( [
                        moment(val['datainativacao']).format("DD/MM/YYYY"),
                        val['dias_sem_uso'],
                        moment(val['datainicial']).format("DD/MM/YYYY"),
                        val['dias_cliente'],
                        val['razaosocial'],
                        val['municipio'] + '-' + val['sigla'],
                        val['sistema'],
                        val['vendedor'],
                        val['implantador'],
                        mascaraValor(val['valor']),
                        val['motivo']
                    ] ).draw( false );
                });
            });
        }
    }

    function drawTabelaEfetivacoesDesistenciasReal(tipo) {
      $.getJSON("/dashboards/get_efetivacoes_desativacoes_sistema_real?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() +
            "&data=" + $('#compentencia_cliente_desativacoes').text() +
            "&tipo=" + tipo, function(data) {
            
        var dataArray = [
            ['Sistema', 'Quantidade'],
        ];
        dataArray.push(['Manager', parseInt(data["manager"])]);
        dataArray.push(['Light', parseInt(data["light"])]);
        dataArray.push(['Emissor', parseInt(data["emissor"])]);
        //dataArray.push(['Fiscal', parseInt(data["fiscal"])]);
        dataArray.push(['Gourmet', parseInt(data["gourmet"])]);
        dataArray.push(['Pró vendas', parseInt(data["pro"])]);
        dataArray.push(['Athus', parseInt(data["athus"])]);
        dataArray.push(['Trade', parseInt(data["trade"])]);
        dataArray.push(['Emissor WEB', parseInt(data["emissor_web"])]);
        dataArray.push(['Híbridos', parseInt(data["hibridos"])]);
        dataArray.push(['Sem sistemas', parseInt(data["sem_sistema"])]); 

        var options = {
            'chartArea': {'width': '100%', 'height': '90%'},
            pieStartAngle: 50,
            legend: {position: 'bottom', textStyle: {fontSize: 10}},
            is3D: true
        };

        var chart = new google.visualization.PieChart(document.getElementById('cliente_cidade'));
        var data = google.visualization.arrayToDataTable(dataArray);

        chart.draw(data, options);
      });
    }

    function drawEfetivacoesDesativacoes2meses(meses) {
        // Não é mais necessário limpar cards separados
        // $('.saldo-acumulado-container').remove();
        // $('#saldo_acumulado_card').remove();
        // $('#saldo_acumulado_container').empty();
      
        $.getJSON("/dashboards/get_efetivacoes_desativacoes_2meses?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() + "&qtd_mes=" + meses, function(data) {
            var dataArray = [
                ['Mês', 'Efetivações', {type: 'string', role: 'annotation'}, 'Desistencias',
                    {type: 'string', role: 'annotation'}, 'Valor Efetivações', 'Média Efetivações',
                    'Valor Desistências', 'Média Desistências', 'Valor Saldo', 'Quantidade Saldo', 'Média Saldo'],
            ];

            for (var i = 0; i < data.length; i++) {
                var row = [data[i].data, parseInt(data[i].quantidadeefetivacoes), parseInt(data[i].quantidadeefetivacoes),
                    parseInt(data[i].quantidadeinativos), parseInt(data[i].quantidadeinativos),  parseFloat(data[i].valorefetivacoes),
                    parseFloat(data[i].mediaefetivacoes), parseFloat(data[i].valorinativos), parseFloat(data[i].mediainativos),
                    parseFloat(data[i].saldo_total), parseInt(data[i].saldo_quantidade), parseFloat(data[i].saldo_media)];
                dataArray.push(row);
            }

            if(data.length > 0){
                preencherEfetivacoesDesistencias($(data).get(-1).data, $(data).get(-1).quantidadeefetivacoes, mascaraValor($(data).get(-1).valorefetivacoes),
                    mascaraValor($(data).get(-1).mediaefetivacoes), $(data).get(-1).quantidadeinativos, mascaraValor($(data).get(-1).valorinativos),
                    mascaraValor($(data).get(-1).mediainativos), $(data).get(-1).saldo_quantidade, mascaraValor($(data).get(-1).saldo_total),
                    mascaraValor($(data).get(-1).saldo_media));
            }else{
                preencherEfetivacoesDesistencias('', 0, mascaraValor('0.00'),
                    mascaraValor('0.00'), 0, mascaraValor('0.00'),
                    mascaraValor('0.00'), 0, mascaraValor('0.00'),
                    mascaraValor('0.00'));
            }

            var options = {
                'chartArea': {'width': '100%', 'height': '90%'},
                vAxis: {title: 'Quant.'},
                hAxis: {title: 'Mês', textStyle: {fontSize: 9, color: 'blue'}},
                seriesType: 'bars',
                isStacked: false,
                legend: {position: 'top'},
                animation: { easing: 'inAndOut', duration: 500, startup: true, displayLegendValues: false}
            };
            var chart = new google.visualization.ComboChart(document.getElementById('efetivacoes_desistencias_12_meses'));

            function selectHandler() {
                var selectedItem = chart.getSelection()[0];
                $('#bloco_efetivacoes_financeiro').hide();
                if (selectedItem) {
                    preencherEfetivacoesDesistencias(data.getValue(selectedItem.row, 0), data.getValue(selectedItem.row, 1), mascaraValor(data.getValue(selectedItem.row, 5).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 6).toFixed(2)), data.getValue(selectedItem.row, 4), mascaraValor(data.getValue(selectedItem.row, 7).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 8).toFixed(2)), data.getValue(selectedItem.row, 10), mascaraValor(data.getValue(selectedItem.row, 9).toFixed(2)),
                        mascaraValor(data.getValue(selectedItem.row, 11).toFixed(2)));
                  
                  if(selectedItem['column'] == 1 && ($('#filtro_grafico_efet_des').val() == 2 || $('#filtro_grafico_efet_des').val() == 3)) { //grafico
                    drawChart2Pagamento("ATIVAS");
                    $('#filtro_grafico_efet_des').val(2);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if(selectedItem['column'] == 1 && ($('#filtro_grafico_efet_des').val() == 1 || $('#filtro_grafico_efet_des').val() == 4 || $('#filtro_grafico_efet_des').val() == 5)) { //tabela
                    drawTabelaEfetivacoesDesistencias2meses("ATIVAS");
                    $('#filtro_grafico_efet_des').val(4);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if(selectedItem['column'] == 1 && $('#filtro_grafico_efet_des').val() == 6) { //tabela UF ativos
                    drawEfetivacoesDesistenciasPorUF(6);
                    document.getElementById("titulo_grafico").innerHTML = "Efetivações";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }
                  else if($('#filtro_grafico_efet_des').val() == 1 || $('#filtro_grafico_efet_des').val() == 4 || $('#filtro_grafico_efet_des').val() == 5) { //tabela
                    drawTabelaEfetivacoesDesistencias2meses("INATIVAS");
                    $('#filtro_grafico_efet_des').val(4);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else if($('#filtro_grafico_efet_des').val() == 6) { //tabela UF desistentes
                    drawEfetivacoesDesistenciasPorUF(7);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }else{ //grafico
                    drawChart2Pagamento("INATIVAS");
                    $('#filtro_grafico_efet_des').val(3);
                    document.getElementById("titulo_grafico").innerHTML = "Desistências";
                    document.getElementById("desc_compt_eft_dest").innerHTML = $('#compentencia_cliente_desativacoes').text();
                  }
                }else{
                    preencherEfetivacoesDesistencias(data.getValue(data.jc.length-1, 0), data.getValue(data.jc.length-1, 1), mascaraValor(data.getValue(data.jc.length-1, 8).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 9).toFixed(2)), data.getValue(data.jc.length-1, 4), mascaraValor(data.getValue(data.jc.length-1, 10).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 11).toFixed(2)), data.getValue(data.jc.length-1, 13), mascaraValor(data.getValue(data.jc.length-1, 12).toFixed(2)),
                        mascaraValor(data.getValue(data.jc.length-1, 14).toFixed(2)));
                }
            }

            google.visualization.events.addListener(chart, 'select', selectHandler);

            var data = google.visualization.arrayToDataTable(dataArray);

            chart.draw(data, options);

            view = new google.visualization.DataView(data);
            view.hideColumns([8,9,10,11,12,13,14]);
            chart.draw(view, options);
        });
    }

    function drawEfetivacoesDesistenciasPorUF(flag) {
      $.getJSON("/dashboards/get_cliente_UF?empresa=" + $('#empresas_financeiro_id').val() +
            "&tipo='NORMAL','EM_MANUTENCAO', 'BLOQUEADO'" +
            "&data=" + $('#compentencia_cliente_desativacoes').text() + "&flag=" + flag, function(data) {         
        
        var datatable = new google.visualization.DataTable();
            datatable.addColumn('string', 'Estado');
            datatable.addColumn('number', 'Quantidade');

        for (var i = 0; i < data.length; i++) {
          datatable.addRow([data[i].estado, data[i].qtd]);
        }         
            
        datatable.sort({column: 1, desc: true});
        for (var i=0; i< data.length; i++){
          datatable.setRowProperty(i, 'className', 'h30');
        }
        //datatable.setRowProperty(data.length-1, 'className', 'bold');

        var table = new google.visualization.Table(document.getElementById('cliente_cidade'));          
          
        table.draw(datatable, {allowHtml: true, width: '100%', height: '100%'});
      });
    }

    function drawTabelaEfetivacoesDesistencias(tipo) {
      $.getJSON("/dashboards/get_efetivacoes_desativacoes_sistema?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() +
            "&data=" + $('#compentencia_cliente_desativacoes').text() +
            "&tipo=" + tipo, function(data) {
            
        var datatable = new google.visualization.DataTable();
            datatable.addColumn('string', 'Sistema');
            datatable.addColumn('number', 'Quantidade');

        datatable.addRow(['Manager', parseInt(data["manager"])]);
        datatable.addRow(['Light', parseInt(data["light"])]);
        datatable.addRow(['Emissor', parseInt(data["emissor"])]);
        //datatable.addRow(['Fiscal', parseInt(data["fiscal"])]);
        datatable.addRow(['Gourmet', parseInt(data["gourmet"])]);
        datatable.addRow(['Pró vendas', parseInt(data["pro"])]);
        datatable.addRow(['Athus', parseInt(data["athus"])]);
        datatable.addRow(['Trade', parseInt(data["trade"])]);
        datatable.addRow(['Emissor WEB', parseInt(data["emissor_web"])]);

        datatable.sort({column: 1, desc: true});

        var table = new google.visualization.Table(document.getElementById('cliente_cidade'));

        table.draw(datatable, {allowHtml: true, width: '100%', height: '100%'});
      });
    }

    function drawTabelaEfetivacoesDesistencias2meses(tipo) {
      $.getJSON("/dashboards/get_efetivacoes_desativacoes_sistema_real?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() +
            "&data=" + $('#compentencia_cliente_desativacoes').text() +
            "&tipo=" + tipo + "&pagamento2=true", function(data) {
            
        var datatable = new google.visualization.DataTable();
            datatable.addColumn('string', 'Sistema');
            datatable.addColumn('number', 'Quantidade');

        datatable.addRow(['Manager', parseInt(data["manager"])]);
        datatable.addRow(['Light', parseInt(data["light"])]);
        datatable.addRow(['Emissor', parseInt(data["emissor"])]);
        //datatable.addRow(['Fiscal', parseInt(data["fiscal"])]);
        datatable.addRow(['Gourmet', parseInt(data["gourmet"])]);
        datatable.addRow(['Pró vendas', parseInt(data["pro"])]);
        datatable.addRow(['Athus', parseInt(data["athus"])]);
        datatable.addRow(['Trade', parseInt(data["trade"])]);
        datatable.addRow(['Emissor WEB', parseInt(data["emissor_web"])]);

        datatable.sort({column: 1, desc: true});

        var table = new google.visualization.Table(document.getElementById('cliente_cidade'));

        table.draw(datatable, {allowHtml: true, width: '100%', height: '100%'});
      });
    }

    function drawChartDesistenciasReal(tipo) {
      $.getJSON("/dashboards/get_efetivacoes_desativacoes_sistema_real?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() +
            "&data=" + $('#compentencia_cliente_desativacoes').text() +
            "&tipo=" + tipo, function(data) {
            
        var dataArray = [
            ['Sistema', 'Quantidade'],
        ];
        dataArray.push(['Manager', parseInt(data["manager"])]);
        dataArray.push(['Light', parseInt(data["light"])]);
        dataArray.push(['Emissor', parseInt(data["emissor"])]);
        //dataArray.push(['Fiscal', parseInt(data["fiscal"])]);
        dataArray.push(['Gourmet', parseInt(data["gourmet"])]);
        dataArray.push(['Pró vendas', parseInt(data["pro"])]);
        dataArray.push(['Athus', parseInt(data["athus"])]);
        dataArray.push(['Trade', parseInt(data["trade"])]);
        dataArray.push(['Emissor WEB', parseInt(data["emissor_web"])]);
        dataArray.push(['Híbridos', parseInt(data["hibridos"])]);
        dataArray.push(['Sem sistemas', parseInt(data["sem_sistema"])]); 

        var options = {
            'chartArea': {'width': '100%', 'height': '90%'},
            pieStartAngle: 50,
            legend: {position: 'bottom', textStyle: {fontSize: 10}},
            is3D: true
        };

        var chart = new google.visualization.PieChart(document.getElementById('cliente_cidade'));
        var data = google.visualization.arrayToDataTable(dataArray);

        chart.draw(data, options);
      });
    }

    function drawChart2Pagamento(tipo) {
      $.getJSON("/dashboards/get_efetivacoes_desativacoes_sistema_real?empresa=" + $('#empresas_financeiro_id').val() +
            "&estado=" + $('#estado_financeiro_id').val() +
            "&data=" + $('#compentencia_cliente_desativacoes').text() +
            "&tipo=" + tipo + "&pagamento2=true", function(data) {
            
        var dataArray = [
            ['Sistema', 'Quantidade'],
        ];
        dataArray.push(['Manager', parseInt(data["manager"])]);
        dataArray.push(['Light', parseInt(data["light"])]);
        dataArray.push(['Emissor', parseInt(data["emissor"])]);
        //dataArray.push(['Fiscal', parseInt(data["fiscal"])]);
        dataArray.push(['Gourmet', parseInt(data["gourmet"])]);
        dataArray.push(['Pró vendas', parseInt(data["pro"])]);
        dataArray.push(['Athus', parseInt(data["athus"])]);
        dataArray.push(['Trade', parseInt(data["trade"])]);
        dataArray.push(['Emissor WEB', parseInt(data["emissor_web"])]);
        dataArray.push(['Híbridos', parseInt(data["hibridos"])]);
        dataArray.push(['Sem sistemas', parseInt(data["sem_sistema"])]); 

        var options = {
            'chartArea': {'width': '100%', 'height': '90%'},
            pieStartAngle: 50,
            legend: {position: 'bottom', textStyle: {fontSize: 10}},
            is3D: true
        };

        var chart = new google.visualization.PieChart(document.getElementById('cliente_cidade'));
        var data = google.visualization.arrayToDataTable(dataArray);

        chart.draw(data, options);
      });
    }

    // Função para testar se a API está funcionando
    function testarAPIEfetivacoes() {
      console.log("Testando conexão com a API...");
      
      $.ajax({
        url: "/dashboards/get_efetivacoes_desativacoesReal",
        data: {
          empresa: '0',
          estado: '0'
        },
        method: 'GET',
        dataType: "json",
        timeout: 5000,
        success: function(data) {
          console.log("Teste de API bem-sucedido, dados recebidos:", data ? data.length : 0);
          if (data && data.length > 0) {
            console.log("Amostra de dados:", data[0]);
          }
        },
        error: function(xhr, status, error) {
          console.error("Teste de API falhou:", status, error);
          console.error("Código de status:", xhr.status);
          console.error("Texto de resposta:", xhr.responseText ? xhr.responseText.substring(0, 300) : "Vazio");
        }
      });
    }

    // Função que calcula as taxas de retenção para cada mês nos dados fornecidos
    function calcularTaxasRetencao(dadosMensais) {
      console.log("Calculando taxas de retenção para", dadosMensais.length, "meses");
      
      return dadosMensais.map(function(mes) {
        var efetivacoes = parseInt(mes.quantidadeefetivacoes) || 0;
        var desistencias = parseInt(mes.quantidadeinativos) || 0;
        var total = efetivacoes + desistencias;
        
        // Cálculo da taxa de retenção: efetivações dividido pelo total
        var taxaRetencao = total > 0 ? (efetivacoes / total) * 100 : 0;
        
        console.log("Mês:", mes.data, "Efetivações:", efetivacoes, 
                   "Desistências:", desistencias, "Taxa:", taxaRetencao.toFixed(1) + "%");
        
        return taxaRetencao;
      });
    }

    // Função para carregar os dados dos últimos meses para o comparativo
    function carregarDadosComparativoMensal() {
      console.log("Carregando dados para comparativo mensal");
      
      // Obter os parâmetros da requisição
      var empresa = $('#empresas_financeiro_id').length ? $('#empresas_financeiro_id').val() : '0';
      var estado = $('#estado_financeiro_id').length ? $('#estado_financeiro_id').val() : '0';
      
      // Buscar dados dos últimos 4 meses (mês atual + 3 anteriores)
      $.ajax({
        url: "/dashboards/get_efetivacoes_desativacoesReal",
        data: {
          empresa: empresa,
          estado: estado
        },
        method: 'GET',
        dataType: "json",
        success: function(data) {
          console.log("Dados recebidos para comparativo mensal:", data ? data.length : 0, "meses");
          
          if (!data || data.length === 0) {
            console.warn("Sem dados para comparativo mensal");
            return;
          }
          
          // Se temos mais de 4 meses, pegar apenas os últimos 4
          var dadosRecentes = data.length > 4 ? data.slice(-4) : data;
          
          // Calcular taxas de retenção para cada mês
          var taxasRetencao = calcularTaxasRetencao(dadosRecentes);
          
          // Atualizar o gráfico comparativo
          atualizarComparativoMensal(taxasRetencao, dadosRecentes);
          
          // Atualizar os insights com os dados do mês mais recente
          if (dadosRecentes.length > 0 && taxasRetencao.length > 0) {
            var mesAtual = dadosRecentes[dadosRecentes.length - 1];
            var taxaAtual = taxasRetencao[taxasRetencao.length - 1];
            
            // Criar objeto com os dados para usar nos insights
            var dadosMesAtual = {
              data: mesAtual.data,
              efetivacoes: parseInt(mesAtual.quantidadeefetivacoes) || 0,
              desistencias: parseInt(mesAtual.quantidadeinativos) || 0,
              taxaRetencao: taxaAtual
            };
            
            // Atualizar os insights com os dados do mês atual
            atualizarInsightsComDadosMes(dadosMesAtual);
          }
        },
        error: function(xhr, status, error) {
          console.error("Falha ao carregar dados para comparativo mensal:", status, error);
          console.error("Detalhes:", xhr.responseText ? xhr.responseText.substring(0, 300) : "Vazio");
        }
      });
    }

    // Função para atualizar o comparativo mensal
    function atualizarComparativoMensal(taxasRetencao, mesesDados) {
      console.log("Atualizando comparativo mensal com", taxasRetencao.length, "meses");
      
      // Armazenar dados para uso posterior ao clicar nas barras
      dadosMensaisHistorico = mesesDados.map(function(mes, index) {
        return {
          data: mes.data,
          efetivacoes: parseInt(mes.quantidadeefetivacoes) || 0,
          desistencias: parseInt(mes.quantidadeinativos) || 0,
          taxaRetencao: taxasRetencao[index] || 0
        };
      });
      
      // Limpar todas as barras primeiro
      for (var i = 1; i <= 5; i++) {
        $('#taxa_mes_' + i).text('0.0%');
        $('#fill_mes_' + i).css('height', '0%');
        $('#label_mes_' + i).text('Mês -' + i);
      }
      $('#taxa_mes_atual').text('0.0%');
      $('#fill_mes_atual').css('height', '0%');
      
      // Se não tivermos dados suficientes, não fazer nada
      if (!taxasRetencao || taxasRetencao.length === 0 || !mesesDados || mesesDados.length === 0) {
        console.warn("Sem dados suficientes para atualizar o comparativo mensal");
        return;
      }
      
      // Meses em português para exibição
      var mesesPT = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
      
      // O último mês é considerado o atual
      var mesAtual = mesesDados[mesesDados.length - 1].data;
      var taxaAtual = taxasRetencao[taxasRetencao.length - 1];
      
      console.log("Mês atual:", mesAtual, "Taxa:", taxaAtual.toFixed(1) + "%");
      
      // Definir valor e altura da barra do mês atual
      $('#taxa_mes_atual').text(taxaAtual.toFixed(1) + '%');
      
      // Animar com delay para melhor visualização
      setTimeout(function() {
        $('#fill_mes_atual').css('height', taxaAtual + '%');
      }, 100);
      
      // Adicionar evento de clique na barra do mês atual
      $('.month-column').first().off('click').on('click', function() {
        var index = dadosMensaisHistorico.length - 1;
        if (index >= 0) {
          atualizarInsightsComDadosMes(dadosMensaisHistorico[index]);
          destacarBarraSelecionada($(this));
        }
      });
      
      // Preencher os meses anteriores (no máximo 3)
      for (var i = mesesDados.length - 2, barIndex = 1; i >= 0 && barIndex <= 3; i--, barIndex++) {
        var mes = mesesDados[i];
        var taxa = taxasRetencao[i];
        
        // Extrair mês e ano para rotular
        var partesMes = mes.data.split('/');
        if (partesMes.length >= 2) {
          var numMes = parseInt(partesMes[0]) - 1; // Meses em JavaScript são base 0
          var ano = partesMes[1];
          
          // Formar o rótulo do mês com nome e ano
          var labelMes = mesesPT[numMes] + '/' + ano;
          
          console.log("Barra", barIndex, ":", labelMes, "Taxa:", taxa.toFixed(1) + "%");
          
          // Atualizar texto e valor da barra
          $('#label_mes_' + barIndex).text(labelMes);
          $('#taxa_mes_' + barIndex).text(taxa.toFixed(1) + '%');
          
          // Animar com delay sequencial
          (function(idx, val) {
            setTimeout(function() {
              $('#fill_mes_' + idx).css('height', val + '%');
            }, 100 + (idx * 50));
          })(barIndex, taxa);
          
          // Adicionar evento de clique para cada barra mensal
          (function(barIdx, dataIndex) {
            $('.month-column').eq(barIdx).off('click').on('click', function() {
              if (dataIndex >= 0 && dataIndex < dadosMensaisHistorico.length) {
                atualizarInsightsComDadosMes(dadosMensaisHistorico[dataIndex]);
                destacarBarraSelecionada($(this));
              }
            });
          })(barIndex, i);
        }
      }
      
      // Atualizar o status de tendência para o gráfico comparativo
      atualizarTendenciaComparativo(taxasRetencao);
    }

    // Adicionar estilos CSS para garantir que o tooltip seja exibido corretamente
    $(document).ready(function() {
      // Adicionar estilos específicos para o tooltip de projeção
      $('head').append(`
        <style>
          .tooltip-tendencia {
            max-width: 360px !important;
            z-index: 9999 !important;
          }
          .tooltip-tendencia .tooltip-inner,
          .tooltip-tendencia .popover-content {
            max-width: 360px !important;
            background-color: #2f4050;
            padding: 15px;
            font-size: 12px;
            line-height: 1.6;
            text-align: left;
            color: #fff;
          }
          .popover.tooltip-tendencia {
            max-width: 360px !important;
            background-color: #2f4050;
            border-color: #1c2b36;
          }
          .popover.tooltip-tendencia .arrow:after {
            border-bottom-color: #2f4050;
          }
          .tooltip-titulo {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #fff;
            border-bottom: 1px solid rgba(255,255,255,0.2);
            padding-bottom: 5px;
          }
          .tooltip-linha {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
          }
          .tooltip-linha span {
            color: rgba(255,255,255,0.8);
          }
          .tooltip-linha strong {
            color: #fff;
            font-weight: 600;
          }
          .tooltip-linha-divisor {
            height: 1px;
            background: rgba(255,255,255,0.2);
            margin: 8px 0;
          }
          .tooltip-descricao {
            margin-top: 10px;
            font-size: 11px;
            color: rgba(255,255,255,0.7);
            line-height: 1.5;
          }
          .projecao-valor {
            font-weight: 700;
            font-size: 14px;
          }
          .projecao-info-icon {
            cursor: pointer;
            transition: all 0.2s ease;
          }
          .projecao-info-icon:hover {
            opacity: 1 !important;
            transform: scale(1.2);
          }
        </style>
      `);
    });

    // Função para calcular projeção linear baseada em dados históricos
    function calcularProjecao(dadosHistoricos, valorParcialAtual) {
      // Precisamos de pelo menos 2 pontos para fazer uma projeção linear
      if (!dadosHistoricos || dadosHistoricos.length < 2) {
        return { projecao: null, r2: 0, explicacao: "Dados insuficientes para projeção" };
      }

      var n = dadosHistoricos.length;
      
      // Criar pontos para regressão linear: x = índice de tempo (0, 1, 2...), y = valor
      var pontos = dadosHistoricos.map(function(valor, index) {
        return { x: index, y: valor };
      });
      
      // Calcular médias
      var mediaX = 0, mediaY = 0;
      for (var i = 0; i < n; i++) {
        mediaX += pontos[i].x;
        mediaY += pontos[i].y;
      }
      mediaX /= n;
      mediaY /= n;
      
      // Calcular coeficientes para y = a + bx
      var numeradorB = 0, denominadorB = 0;
      for (var i = 0; i < n; i++) {
        numeradorB += (pontos[i].x - mediaX) * (pontos[i].y - mediaY);
        denominadorB += Math.pow(pontos[i].x - mediaX, 2);
      }
      
      // Evitar divisão por zero
      var b = denominadorB !== 0 ? numeradorB / denominadorB : 0;
      var a = mediaY - b * mediaX;
      
      // Calcular a projeção para o mês atual (último ponto + 1)
      var projecao = a + b * n;
      
      // Calcular R² (coeficiente de determinação) para avaliar a qualidade da regressão
      var sqTotal = 0, sqResidual = 0;
      for (var i = 0; i < n; i++) {
        sqTotal += Math.pow(pontos[i].y - mediaY, 2);
        var valorEstimado = a + b * pontos[i].x;
        sqResidual += Math.pow(pontos[i].y - valorEstimado, 2);
      }
      
      var r2 = sqTotal !== 0 ? 1 - (sqResidual / sqTotal) : 0;
      
      // Limitar a projeção entre 0 e 100 (já que são percentagens)
      projecao = Math.max(0, Math.min(100, projecao));
      
      // Determinar a tendência com base no coeficiente angular
      var tendencia = "estável";
      if (b > 0.5) tendencia = "crescente";
      else if (b < -0.5) tendencia = "decrescente";
      
      // Calcular a diferença entre o valor atual parcial e o projetado
      var diferencaAtualProjetado = valorParcialAtual - projecao;
      
      // Avaliar o desempenho do mês atual em relação à projeção
      var statusDesempenho = "conforme esperado";
      if (diferencaAtualProjetado >= 2) statusDesempenho = "acima do esperado";
      else if (diferencaAtualProjetado <= -2) statusDesempenho = "abaixo do esperado";
      
      var confiabilidade = "baixa";
      if (r2 > 0.7) confiabilidade = "alta";
      else if (r2 > 0.4) confiabilidade = "média";
      
      // Preparar explicação para o tooltip
      var explicacao = "Com base nos " + n + " meses anteriores, o valor projetado para o mês atual é " + 
                       projecao.toFixed(1) + "%. O valor parcial atual está " + statusDesempenho + ".";
      
      return {
        projecao: projecao,
        diferencaAtualProjetado: diferencaAtualProjetado,
        tendencia: tendencia,
        statusDesempenho: statusDesempenho,
        confiabilidade: confiabilidade,
        r2: r2,
        coeficienteAngular: b,
        explicacao: explicacao
      };
    }

    // Função para atualizar a tendência do comparativo (agora com projeção para o mês atual)
    function atualizarTendenciaComparativo(taxasRetencao) {
      if (taxasRetencao.length < 3) return; // Precisamos de pelo menos 3 meses para projetar o 4º (atual)
      
      // Obter o valor do mês atual (valor parcial até o momento)
      var valorAtual = taxasRetencao[taxasRetencao.length - 1];
      var texto = "";
      var icone = "";
      var classe = "";
      
      // Calcular projeção baseada apenas nos meses anteriores (excluindo o atual)
      // Se tivermos muitos meses, usar apenas os 3 anteriores para a projeção
      var dadosParaProjecao = taxasRetencao.length > 4 
                              ? taxasRetencao.slice(-4, -1) // Últimos 3 meses completos, excluindo o atual
                              : taxasRetencao.slice(0, -1); // Todos os meses anteriores, excluindo o atual
      
      var resultadoProjecao = calcularProjecao(dadosParaProjecao, valorAtual);
      var projecao = resultadoProjecao.projecao;
      
      // Se não conseguimos calcular a projeção, mostrar mensagem
      if (projecao === null) {
        texto = "Projeção indisponível: dados insuficientes";
        icone = "fa-question-circle";
        classe = "#f8ac59";
      } else {
        // Determinar texto e estilo com base na comparação entre valor atual e projeção
        var diferencaAtualProjetado = resultadoProjecao.diferencaAtualProjetado;
        
        if (diferencaAtualProjetado >= 2) {
          texto = "Mês atual " + Math.abs(diferencaAtualProjetado).toFixed(1) + "% acima da projeção";
          icone = "fa-line-chart";
          classe = "#5cb85c";
        } else if (diferencaAtualProjetado <= -2) {
          texto = "Mês atual " + Math.abs(diferencaAtualProjetado).toFixed(1) + "% abaixo da projeção";
          icone = "fa-line-chart";
          classe = "#ed5565";
        } else {
          texto = "Mês atual conforme projeção (" + diferencaAtualProjetado.toFixed(1) + "%)";
          icone = "fa-line-chart";
          classe = "#f8ac59";
        }
      }
      
      // Criar a explicação detalhada para o tooltip
      var explicacaoHTML = "<div class='tooltip-titulo'>Projeção para o mês atual</div>";
      
      // Dados atuais
      explicacaoHTML += "<div class='tooltip-linha'>" +
                        "<span>Taxa de retenção atual (parcial):</span>" +
                        "<strong>" + valorAtual.toFixed(1) + "%</strong>" +
                        "</div>";
      
      // Se temos projeção
      if (projecao !== null) {
        // Mostrar valores dos meses anteriores
        explicacaoHTML += "<div style='margin: 10px 0 5px 0;'><strong>Histórico de taxas:</strong></div>";
        
        for (var i = 0; i < dadosParaProjecao.length; i++) {
          var mesIndex = dadosParaProjecao.length - 1 - i;
          var rotulo = (i === 0) ? "Mês anterior" : (i + 1) + " meses atrás";
          
          explicacaoHTML += "<div class='tooltip-linha'>" +
                            "<span>" + rotulo + ":</span>" +
                            "<strong>" + dadosParaProjecao[mesIndex].toFixed(1) + "%</strong>" +
                            "</div>";
        }
        
        // Adicionar separador
        explicacaoHTML += "<div class='tooltip-linha-divisor'></div>";
        
        // Mostrar projeção
        explicacaoHTML += "<div class='tooltip-linha'>" +
                        "<span>Valor projetado para o mês atual:</span>" +
                        "<strong class='projecao-valor' style='color:" + classe + "'>" + projecao.toFixed(1) + "%</strong>" +
                        "</div>";
        
        // Variação entre valor atual e projetado
        var corDiferenca = "#f8ac59"; // neutro
        if (resultadoProjecao.diferencaAtualProjetado >= 2) corDiferenca = "#5cb85c"; // positivo
        else if (resultadoProjecao.diferencaAtualProjetado <= -2) corDiferenca = "#ed5565"; // negativo
        
        explicacaoHTML += "<div class='tooltip-linha'>" +
                        "<span>Comparação com o projetado:</span>" +
                        "<strong style='color:" + corDiferenca + "'>" + (resultadoProjecao.diferencaAtualProjetado >= 0 ? "+" : "") + resultadoProjecao.diferencaAtualProjetado.toFixed(1) + "%</strong>" +
                        "</div>";
        
        // Detalhes da confiabilidade
        var corConfiabilidade = "#f8ac59"; // amarelo para média
        if (resultadoProjecao.confiabilidade === "alta") corConfiabilidade = "#5cb85c";
        else if (resultadoProjecao.confiabilidade === "baixa") corConfiabilidade = "#ed5565";
        
        explicacaoHTML += "<div class='tooltip-linha'>" +
                        "<span>Confiabilidade da projeção:</span>" +
                        "<strong style='color:" + corConfiabilidade + "'>" + resultadoProjecao.confiabilidade.toUpperCase() + "</strong>" +
                        "</div>";
                        
        // Descrição
        explicacaoHTML += "<div class='tooltip-descricao'>" +
                        "Esta projeção utiliza regressão linear com base nos dados dos " + dadosParaProjecao.length + " meses anteriores. " +
                        "A tendência histórica é " + resultadoProjecao.tendencia + " com inclinação de " + 
                        resultadoProjecao.coeficienteAngular.toFixed(2) + ". " +
                        "O valor atual está " + resultadoProjecao.statusDesempenho + " em relação à projeção para este mês." +
                        "</div>";
      } else {
        explicacaoHTML += "<div class='tooltip-descricao'>" +
                          "Não há dados suficientes para fazer uma projeção confiável. " +
                          "São necessários pelo menos 2 meses anteriores completos para projetar o mês atual." +
                          "</div>";
      }
      
      // Container com estilo para indicar que há informação adicional disponível
      var htmlTendencia = '<div class="tendencia-container" style="display: inline-block; padding: 5px 10px; border-radius: 4px; border: 1px dashed rgba(0,0,0,0.1); background-color: rgba(255,255,255,0.3); transition: all 0.2s ease;">' +
                         '<span style="font-size: 12px; color: ' + classe + '; font-weight: 500;">' +
                         '<i class="fa ' + icone + '" style="margin-right: 5px; font-size: 10px;"></i>' + texto + 
                         '</span>' +
                         '<i class="fa fa-info-circle projecao-info-icon" style="margin-left: 5px; font-size: 12px; opacity: 0.7; cursor: pointer;" data-html="true" data-content="' + explicacaoHTML + '"></i>' +
                         '</div>';
                          
      // Atualizar o elemento de tendência
      $('.monthly-chart').next().find('span, div.tendencia-container').remove();
      $('.monthly-chart').next().find('div').html(htmlTendencia);
      
      // Adicionar hover effect ao container
      $('.tendencia-container').hover(
        function() {
          $(this).css({
            'background-color': 'rgba(255,255,255,0.5)',
            'border-color': 'rgba(0,0,0,0.2)'
          });
        },
        function() {
          $(this).css({
            'background-color': 'rgba(255,255,255,0.3)',
            'border-color': 'rgba(0,0,0,0.1)'
          });
        }
      );
      
      // Inicializar o popover que aparecerá ao clicar no ícone
      $('.projecao-info-icon').popover({
        placement: 'bottom',
        container: 'body',
        trigger: 'click',
        html: true,
        template: '<div class="popover tooltip-tendencia" role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>',
        title: ''
      });
      
      // Fechar outros popovers quando um novo for aberto
      $('.projecao-info-icon').on('click', function() {
        $('.projecao-info-icon').not(this).popover('hide');
      });
      
      // Fechar popover ao clicar fora dele
      $(document).on('click', function(e) {
        if ($(e.target).closest('.popover').length === 0 && 
            !$(e.target).hasClass('projecao-info-icon')) {
          $('.projecao-info-icon').popover('hide');
        }
      });
    }

    // Função para destacar a barra selecionada
    function destacarBarraSelecionada(barraEl) {
      // Remover destaque de todas as barras
      $('.month-column').removeClass('selected-bar');
      $('.month-column').find('div:nth-child(2)').css('border', 'none');
      
      // Adicionar destaque à barra selecionada
      barraEl.addClass('selected-bar');
      barraEl.find('div:nth-child(2)').css('border', '2px solid #1c84c6');
    }
    
    // Função para atualizar os insights com os dados do mês selecionado
    function atualizarInsightsComDadosMes(dadosMes) {
      if (!dadosMes) return;
      
      console.log("Atualizando insights com dados do mês:", dadosMes);
      
      // Extrair partes da data para exibição no título
      var partesMes = dadosMes.data.split('/');
      var mesesPT = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", 
                     "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
      var nomeMes = "";
      
      if (partesMes.length >= 2) {
        var numMes = parseInt(partesMes[0]) - 1; // Meses em JavaScript são base 0
        var ano = partesMes[1];
        nomeMes = mesesPT[numMes] + " de " + ano;
      }
      
      // Atualizar o título do card com o mês selecionado
      $('.insights-title').text('Insights - Taxa de Retenção: ' + nomeMes);
      
      // Atualizar valores dos insights
      $('#insight_efetivacoes').text(dadosMes.efetivacoes.toLocaleString('pt-BR'));
      $('#insight_desistencias').text(dadosMes.desistencias.toLocaleString('pt-BR'));
      $('#insight_taxa_retencao').text(dadosMes.taxaRetencao.toFixed(1) + '%');
      
      // Calcular e atualizar a métrica do churn
      var totalAlunos = dadosMes.efetivacoes + dadosMes.desistencias;
      var churnRate = totalAlunos > 0 ? (dadosMes.desistencias / totalAlunos * 100) : 0;
      $('#insight_churn_rate').text(churnRate.toFixed(1) + '%');
      
      // Ajustar classes de cores baseado nos valores
      if (dadosMes.taxaRetencao > 60) {
        $('#insight_taxa_retencao').removeClass('text-danger text-warning').addClass('text-navy');
      } else if (dadosMes.taxaRetencao > 40) {
        $('#insight_taxa_retencao').removeClass('text-danger text-navy').addClass('text-warning');
      } else {
        $('#insight_taxa_retencao').removeClass('text-navy text-warning').addClass('text-danger');
      }
      
      if (churnRate < 20) {
        $('#insight_churn_rate').removeClass('text-danger text-warning').addClass('text-navy');
      } else if (churnRate < 40) {
        $('#insight_churn_rate').removeClass('text-danger text-navy').addClass('text-warning');
      } else {
        $('#insight_churn_rate').removeClass('text-navy text-warning').addClass('text-danger');
      }
    }

    // Filtrar dados por período selecionado
    function filtrarDadosPorPeriodo(dados, periodo) {
      if (periodo === 'ano_atual') {
        var anoAtual = new Date().getFullYear();
        return dados.filter(function(item) {
          return parseInt(item.data.split('/')[1]) === anoAtual;
        });
      } else {
        // Limitar aos últimos X meses
        return dados.slice(-parseInt(periodo));
      }
    }

    // Atualizar status da taxa de desistência
    function atualizarStatusDesistencia(taxa) {
      var status = $('#status_desistencia');
      var text = $('.status-text', status);
      
      status.removeClass('warning negative');
      
      if (taxa <= 30) {
        text.text('Excelente');
      } else if (taxa <= 40) {
        text.text('Dentro da meta');
        status.addClass('warning');
      } else {
        text.text('Acima da meta');
        status.addClass('negative');
      }
    }

    // Atualizar status de retenção conforme metas
    function atualizarStatusRetencao(taxa) {
      if (taxa >= 80) {
        $('#status_retencao').text('Ótimo');
        $('#status_retencao').removeClass('status-ok status-warning status-critical').addClass('status-great');
        $('#status_retencao .status-text').text('Acima da meta');
      } else if (taxa >= 70) {
        $('#status_retencao').text('Bom');
        $('#status_retencao').removeClass('status-great status-warning status-critical').addClass('status-ok');
        $('#status_retencao .status-text').text('Dentro da meta');
      } else if (taxa >= 60) {
        $('#status_retencao').text('Regular');
        $('#status_retencao').removeClass('status-great status-ok status-critical').addClass('status-warning');
        $('#status_retencao .status-text').text('Abaixo da meta');
      } else {
        $('#status_retencao').text('Crítico');
        $('#status_retencao').removeClass('status-great status-ok status-warning').addClass('status-critical');
        $('#status_retencao .status-text').text('Muito abaixo da meta');
      }
    }
    
    // Atualizar tendências
    function atualizarTendencias(variacaoDesistencia, variacaoRetencao, mesEmAndamento) {
      // Obter valores atuais
      var taxaDesistenciaAtual = parseFloat($('#taxa_desistencia').text()) || 0;
      var taxaRetencaoAtual = parseFloat($('#taxa_retencao').text()) || 0;
      
      // Renderizar variação atual na UI
      $('#variacao_desistencia').text((variacaoDesistencia >= 0 ? '+' : '') + variacaoDesistencia.toFixed(1) + '%');
      $('#variacao_retencao').text((variacaoRetencao >= 0 ? '+' : '') + variacaoRetencao.toFixed(1) + '%');
      
      // Colorir as variações conforme positivo/negativo (para desistência, negativo é bom)
      if (variacaoDesistencia < 0) {
        $('#variacao_desistencia').css('color', '#5cb85c').css('background', 'rgba(92, 184, 92, 0.1)');
      } else {
        $('#variacao_desistencia').css('color', '#ed5565').css('background', 'rgba(237, 85, 101, 0.1)');
      }
      
      // Para retenção, positivo é bom
      if (variacaoRetencao > 0) {
        $('#variacao_retencao').css('color', '#5cb85c').css('background', 'rgba(92, 184, 92, 0.1)');
      } else {
        $('#variacao_retencao').css('color', '#ed5565').css('background', 'rgba(237, 85, 101, 0.1)');
      }
      
      // Se mesEmAndamento não for fornecido, assumir verdadeiro (mês em andamento)
      if (mesEmAndamento === undefined) {
        mesEmAndamento = true;
      }
      
      // Atualizar indicador de meta para desistência
      $('#trend_desistencia').removeClass('trend-neutral trend-negative trend-positive');
      if (taxaDesistenciaAtual < 40) {
        $('#trend_desistencia').addClass('trend-positive');
        
        if (mesEmAndamento) {
          $('#trend_desistencia').html('<i class="fa fa-hourglass-half" style="margin-right: 5px; font-size: 11px;"></i>Meta parcialmente atingida');
        } else {
          $('#trend_desistencia').html('<i class="fa fa-check-circle" style="margin-right: 5px; font-size: 11px;"></i>Meta atingida');
        }
      } else {
        $('#trend_desistencia').addClass('trend-negative');
        
        if (mesEmAndamento) {
          $('#trend_desistencia').html('<i class="fa fa-hourglass-half" style="margin-right: 5px; font-size: 11px;"></i>Meta ainda não atingida');
        } else {
          $('#trend_desistencia').html('<i class="fa fa-times-circle" style="margin-right: 5px; font-size: 11px;"></i>Meta não atingida');
        }
      }
      
      // Atualizar indicador de meta para retenção
      $('#trend_retencao').removeClass('trend-neutral trend-negative trend-positive');
      if (taxaRetencaoAtual > 70) {
        $('#trend_retencao').addClass('trend-positive');
        
        if (mesEmAndamento) {
          $('#trend_retencao').html('<i class="fa fa-hourglass-half" style="margin-right: 5px; font-size: 11px;"></i>Meta parcialmente atingida');
        } else {
          $('#trend_retencao').html('<i class="fa fa-check-circle" style="margin-right: 5px; font-size: 11px;"></i>Meta atingida');
        }
      } else {
        $('#trend_retencao').addClass('trend-negative');
        
        if (mesEmAndamento) {
          $('#trend_retencao').html('<i class="fa fa-hourglass-half" style="margin-right: 5px; font-size: 11px;"></i>Meta ainda não atingida');
        } else {
          $('#trend_retencao').html('<i class="fa fa-times-circle" style="margin-right: 5px; font-size: 11px;"></i>Meta não atingida');
        }
      }
    }

    $(document).ready(function() {
      // Inicialização de elementos UI
      $('body').append('<div id="mensagem_mes_selecionado" style="display:none; position:fixed; top:10px; right:10px; padding:10px; background-color:#4a90e2; color:white; border-radius:4px; z-index:9999;"></div>');
      
      // Executar o teste de API para verificar se está funcionando
      setTimeout(function() {
        testarAPIEfetivacoes();
      }, 1000);
      
      // Carregar dados para o comparativo mensal
      setTimeout(function() {
        carregarDadosComparativoMensal();
      }, 1500);
      
      // Outros elementos de inicialização podem ficar aqui
    });

    // Função para calcular e atualizar os insights
    function atualizarInsights(periodo) {
      console.log("Atualizando insights para o período:", periodo);
      
      // Verificar se o período é válido
      if (!periodo) {
        console.warn("Período inválido, usando ano_atual como padrão");
        periodo = "ano_atual";
      }
      
      // Obter os parâmetros da requisição com valores padrão - usando a mesma lógica do restante do dashboard
      var empresa = $('#empresas_financeiro_id').length ? $('#empresas_financeiro_id').val() : '0';
      var estado = $('#estado_financeiro_id').length ? $('#estado_financeiro_id').val() : '0';
      
      console.log("Parâmetros para API: empresa=", empresa, "estado=", estado, "periodo:", periodo);
      
      // Mostrar indicador de carregamento
      $('#taxa_desistencia, #taxa_retencao').text('Carregando...');
      $('#status_desistencia .status-text, #status_retencao .status-text').text('Carregando...');
      $('#status_progresso').text('Carregando...');
      
      // Adicionar um timeout para detectar se a requisição demora muito
      var requestTimeout = setTimeout(function() {
        console.warn("A requisição está demorando mais que o esperado...");
      }, 5000);
      
      // Usar a mesma API e o mesmo formato de requisição que drawEfetivacoesDesativacoesReal
      $.getJSON("/dashboards/get_efetivacoes_desativacoesReal?empresa=" + empresa + "&estado=" + estado, function(data) {
        // Limpar o timeout
        clearTimeout(requestTimeout);
        
        console.log("Dados recebidos para insights:", data);
        
        try {
          if (!data || data.length === 0) {
            console.warn("Sem dados disponíveis para insights");
            // Zerar todos os valores
            $('#taxa_desistencia').text('0.0%');
            $('#taxa_retencao').text('100.0%');
            $('#fill_desistencia').css('width', '0%');
            $('#fill_retencao').css('width', '100%');
            
            // Limpar o comparativo mensal
            for (var i = 1; i <= 5; i++) {
              $('#taxa_mes_' + i).text('0.0%');
              $('#fill_mes_' + i).css('height', '0%');
              $('#label_mes_' + i).text('Mês -' + i);
            }
            $('#taxa_mes_atual').text('0.0%');
            $('#fill_mes_atual').css('height', '0%');
            
            // Atualizar status
            $('#status_desistencia .status-text').text('Sem dados');
            $('#status_retencao .status-text').text('Sem dados');
            $('#status_progresso').text('Sem dados');
            $('#status_progresso_detail .status-text').text('Dados insuficientes');
            
            return;
          }
          
          // Log para verificar a estrutura dos dados
          console.log("Estrutura do primeiro registro:", Object.keys(data[0]).join(", "));
          
          // Para o comparativo mensal, sempre usamos os últimos 6 meses disponíveis
          var dadosComparativoMensal = data.slice(-6);
          
          if (dadosComparativoMensal.length > 0) {
            console.log("Dados para comparativo mensal:", dadosComparativoMensal.length, "meses");
            // Calcular taxas de retenção para o comparativo mensal
            var taxasRetencao = [];
            
            for (var i = 0; i < dadosComparativoMensal.length; i++) {
              var mes = dadosComparativoMensal[i];
              var efetivacoesMes = parseInt(mes.quantidadeefetivacoes) || 0;
              var desistenciasMes = parseInt(mes.quantidadeinativos) || 0;
              
              // Calcular taxa de retenção usando a fórmula correta:
              // 1. Soma de efetivações + desistências
              // 2. Quantidade efetivações dividido pelo resultado do cálculo anterior
              // 3. Resultado vezes 100 = resultado %
              var total = efetivacoesMes + desistenciasMes;
              var taxaRetencao = total > 0 ? (efetivacoesMes / total) * 100 : 0;
              
              taxasRetencao.push(taxaRetencao);
            }
            
            // Atualizar o comparativo mensal com os últimos 6 meses
            atualizarComparativoMensal(taxasRetencao, dadosComparativoMensal);
          }
          
          // Identificar o período conforme seleção para os outros insights
          console.log("Filtrando dados para o período:", periodo);
          var dadosFiltrados = [];
          
          if (periodo === 'ano_atual') {
            // Ano atual - filtrar dados apenas do ano corrente
            var anoAtual = new Date().getFullYear();
            console.log("Filtrando por ano atual:", anoAtual);
            
            for (var i = 0; i < data.length; i++) {
              // Extrair o ano do campo data (formato MM/AAAA)
              var dataParts = data[i].data.split('/');
              var anoData = parseInt(dataParts[1]);
              
              console.log("Item:", i, "data:", data[i].data, "ano:", anoData);
              
              if (anoData === anoAtual) {
                dadosFiltrados.push(data[i]);
              }
            }
            
            // Se não encontrou dados do ano atual, usar todos os dados
            if (dadosFiltrados.length === 0) {
              console.warn("Nenhum dado encontrado para o ano atual. Usando todos os dados.");
              dadosFiltrados = data;
            }
          } else {
            // Número específico de meses - limitar à quantidade de dados disponíveis
            var numMeses = parseInt(periodo);
            console.log("Filtrando por número de meses:", numMeses);
            
            // Usar exatamente o número de meses solicitado
            if (data.length < numMeses) {
              console.warn("Dados disponíveis (" + data.length + ") são menos que o solicitado (" + numMeses + "). Usando todos.");
              dadosFiltrados = data;
            } else {
              dadosFiltrados = data.slice(-numMeses);
              console.log("Limitando a " + numMeses + " meses. Dados filtrados:", dadosFiltrados.length);
            }
          }
          
          // Se ainda não tem dados filtrados, não fazer nada
          if (dadosFiltrados.length === 0) {
            console.warn("Sem dados filtrados disponíveis");
            $('#taxa_desistencia').text('0.0%');
            $('#taxa_retencao').text('100.0%');
            return;
          }
          
          // Verificar se estamos em um filtro por meses específicos
          var usarMediaNoLugarDeUltimoMes = (periodo !== 'ano_atual' && parseInt(periodo) > 0);
          
          // Debug: mostrar os meses que serão usados para cálculo
          for (var i = 0; i < dadosFiltrados.length; i++) {
            console.log("Mês " + (i+1) + ":", dadosFiltrados[i].data, 
              "Efetivações:", dadosFiltrados[i].quantidadeefetivacoes, 
              "Desistências:", dadosFiltrados[i].quantidadeinativos);
          }
          
          // Verificar a estrutura dos dados antes de processar
          if (!dadosFiltrados[0].hasOwnProperty('quantidadeefetivacoes') || !dadosFiltrados[0].hasOwnProperty('quantidadeinativos')) {
            throw new Error("Estrutura de dados inválida: propriedades esperadas não encontradas");
          }
          
          // Calcular taxas de retenção e desistência para os cards
          var desistencias = [];
          var retencoes = [];
          var totalEfetivacoes = 0;
          var totalDesistencias = 0;
          
          for (var i = 0; i < dadosFiltrados.length; i++) {
            var mes = dadosFiltrados[i];
            var efetivacoesMes = parseInt(mes.quantidadeefetivacoes) || 0;
            var desistenciasMes = parseInt(mes.quantidadeinativos) || 0;
            
            totalEfetivacoes += efetivacoesMes;
            totalDesistencias += desistenciasMes;
            
            // Calcular taxa de retenção usando a fórmula correta
            var total = efetivacoesMes + desistenciasMes;
            var taxaRetencao = total > 0 ? (efetivacoesMes / total) * 100 : 0;
            var taxaDesistencia = 100 - taxaRetencao;
            
            console.log("Mês:", mes.data, "Efetivações:", efetivacoesMes, "Desistências:", desistenciasMes, 
                        "Taxa de Retenção:", taxaRetencao.toFixed(1) + "%", 
                        "Taxa de Desistência:", taxaDesistencia.toFixed(1) + "%");
            
            desistencias.push(taxaDesistencia);
            retencoes.push(taxaRetencao);
          }
          
          // Taxa de desistência/retenção será a do último mês ou a média do período selecionado
          var taxaDesistenciaAtual, taxaRetencaoAtual;
          
          if (usarMediaNoLugarDeUltimoMes) {
            // Usar a taxa média do período quando um filtro específico de meses for usado
            var total = totalEfetivacoes + totalDesistencias;
            taxaRetencaoAtual = total > 0 ? (totalEfetivacoes / total) * 100 : 0;
            taxaDesistenciaAtual = 100 - taxaRetencaoAtual;
            
            console.log("Usando média do período. Taxa média de retenção:", taxaRetencaoAtual.toFixed(1) + "%");
            console.log("Taxa média de desistência:", taxaDesistenciaAtual.toFixed(1) + "%");
          } else {
            // Usar a taxa do último mês quando o filtro for ano atual
            var ultimoMes = dadosFiltrados[dadosFiltrados.length - 1];
            var efetivacoes = parseInt(ultimoMes.quantidadeefetivacoes) || 0;
            var desistencias = parseInt(ultimoMes.quantidadeinativos) || 0;
            var total = efetivacoes + desistencias;
            
            taxaRetencaoAtual = total > 0 ? (efetivacoes / total) * 100 : 0;
            taxaDesistenciaAtual = 100 - taxaRetencaoAtual;
            
            console.log("Usando último mês. Taxa de retenção atual:", taxaRetencaoAtual.toFixed(1) + "%");
            console.log("Taxa de desistência atual:", taxaDesistenciaAtual.toFixed(1) + "%");
          }
          
          // Variação em relação ao mês anterior (apenas quando não estamos usando média)
          var variacaoDesistencia = 0;
          var variacaoRetencao = 0;
          
          if (!usarMediaNoLugarDeUltimoMes && retencoes.length > 1) {
            var taxaRetencaoAtual = retencoes[retencoes.length - 1];
            var taxaRetencaoAnterior = retencoes[retencoes.length - 2];
            
            variacaoRetencao = taxaRetencaoAtual - taxaRetencaoAnterior;
            variacaoDesistencia = -variacaoRetencao; // Se a retenção sobe, a desistência cai
            
            console.log("Variação retenção:", variacaoRetencao.toFixed(1) + "%");
            console.log("Variação desistência:", variacaoDesistencia.toFixed(1) + "%");
          } else if (usarMediaNoLugarDeUltimoMes) {
            // Quando estamos usando média, não há variação a ser exibida
            console.log("Usando média de período, não há variação a ser calculada");
          }
          
          // Atualizar os valores na UI
          $('#taxa_desistencia').text(taxaDesistenciaAtual.toFixed(1) + '%');
          $('#taxa_retencao').text(taxaRetencaoAtual.toFixed(1) + '%');
          
          // Preencher barras de progresso
          $('#fill_desistencia').css('width', Math.min(100, (taxaDesistenciaAtual * 100 / 40)) + '%');
          $('#fill_retencao').css('width', (taxaRetencaoAtual * 100 / 100) + '%');
          
          // Atualizar status conforme metas
          atualizarStatusDesistencia(taxaDesistenciaAtual);
          atualizarStatusRetencao(taxaRetencaoAtual);
          
          // Atualizar tendências apenas se não estamos usando média
          if (!usarMediaNoLugarDeUltimoMes) {
            atualizarTendencias(variacaoDesistencia, variacaoRetencao, true); // true indica mês em andamento
            // Não atualizamos mais aqui, pois agora é feito na função atualizarComparativoMensal
            // atualizarStatusProgresso(variacaoRetencao);
          } else {
            // Limpar as tendências quando usamos média
            $('#trend_desistencia .trend-arrow, #trend_retencao .trend-arrow').text('');
            // Não atualizamos mais o status de progresso aqui
            // $('#status_progresso').text('Média');
            // $('#status_progresso_detail .status-text').text('Média do período selecionado');
          }
          
          console.log("Insights atualizados com sucesso para o período " + periodo);
        } catch (e) {
          console.error("Erro ao processar dados para insights:", e.message);
          console.error("Detalhes do erro:", e.stack);
          
          // Mostrar mensagem de erro específica na UI
          $('#taxa_desistencia').text('Erro');
          $('#taxa_retencao').text('Erro');
          $('#status_desistencia .status-text').text('Erro ao processar');
          $('#status_retencao .status-text').text('Erro ao processar');
          $('#status_progresso').text('Erro');
          $('#status_progresso_detail .status-text').text('Falha ao calcular dados');
        }
      }).fail(function(xhr, status, error) {
        // Limpar o timeout
        clearTimeout(requestTimeout);
        
        console.error("Erro ao carregar dados para insights:", status, error);
        console.error("Código de status:", xhr.status);
        
        // Tentar extrair informações detalhadas do erro
        var errorDetails = "";
        try {
          if (xhr.responseText) {
            errorDetails = "\nResposta: " + xhr.responseText.substring(0, 200);
            
            // Tentar fazer parse da resposta como JSON
            var jsonResponse = JSON.parse(xhr.responseText);
            if (jsonResponse && jsonResponse.error) {
              errorDetails += "\nErro específico: " + jsonResponse.error;
            }
          }
        } catch (e) {
          errorDetails = "\nNão foi possível extrair detalhes adicionais do erro.";
        }
        
        console.error("Detalhes da resposta:", errorDetails);
        
        // Mostrar mensagem de erro na UI
        $('#taxa_desistencia').text('Erro');
        $('#taxa_retencao').text('Erro');
        $('#status_desistencia .status-text').text('Erro ao carregar');
        $('#status_retencao .status-text').text('Erro ao carregar');
        $('#status_progresso').text('Erro');
        $('#status_progresso_detail .status-text').text('Falha na comunicação');
        
        // Limpar barras de progresso
        $('#fill_desistencia').css('width', '0%');
        $('#fill_retencao').css('width', '0%');
        
        // Limpar o comparativo mensal
        for (var i = 1; i <= 5; i++) {
          $('#taxa_mes_' + i).text('0.0%');
          $('#fill_mes_' + i).css('height', '0%');
          $('#label_mes_' + i).text('Mês -' + i);
        }
        $('#taxa_mes_atual').text('0.0%');
        $('#fill_mes_atual').css('height', '0%');
      });
    }

</script>
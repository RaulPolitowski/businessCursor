
CREATE OR REPLACE FUNCTION public.logecf() RETURNS trigger
    LANGUAGE plpgsql
    AS $body$ 
											DECLARE
COLUNAS RECORD;
											    CAMPO_NOVO TEXT; 
											    CAMPO_ANTIGO TEXT; 
											    USER_ID CHARACTER VARYING(255); 
											    IDALTERACAO INT; 
											    CHAVES RECORD; 
											    CHAVE TEXT; 
											    VALORCHAVE TEXT; 
											    NOVOID INT;
BEGIN
SELECT INTO IDALTERACAO (COALESCE(MAX(ALTERACAOID),0) + 1) FROM AUDITORIA;
BEGIN
SELECT INTO USER_ID CURRENT_SETTING('APP.USER_SESSION');
EXCEPTION WHEN UNDEFINED_OBJECT THEN
SELECT INTO USER_ID CURRENT_USER;
END;
												IF(USER_ID = 'POSTGRES') THEN
BEGIN
SELECT INTO USER_ID CURRENT_SETTING('APP.USER_SESSION');
EXCEPTION WHEN UNDEFINED_OBJECT THEN
SELECT INTO USER_ID CURRENT_USER;
END;
END IF;
											    CHAVE = ''; 
											    VALORCHAVE = '';
FOR CHAVES IN
SELECT PG_ATTRIBUTE.ATTNAME AS ATRIBUTO
FROM PG_INDEX, PG_CLASS, PG_ATTRIBUTE
WHERE
        PG_CLASS.RELNAME = QUOTE_IDENT(TG_RELNAME) AND
        INDRELID = PG_CLASS.OID AND
        PG_ATTRIBUTE.ATTRELID = PG_CLASS.OID AND
        PG_ATTRIBUTE.ATTNUM = ANY(PG_INDEX.INDKEY)
  AND INDISPRIMARY
    LOOP
												IF(TG_OP = 'DELETE') THEN  
												    EXECUTE 'SELECT ($1).' || TRIM(CHAVES.ATRIBUTO) || '::TEXT' INTO VALORCHAVE USING OLD;
ELSE 	IF(TG_OP = 'UPDATE') THEN
														EXECUTE 'SELECT ($1).' || TRIM(CHAVES.ATRIBUTO) || '::TEXT' INTO VALORCHAVE USING OLD;
END IF;
END IF;
												    IF(CHAVE = '') THEN 
													CHAVE = VALORCHAVE || ',' ;
ELSE
													CHAVE = CHAVE || ', ' || VALORCHAVE;
END IF;
END LOOP;
											    CHAVE = SUBSTRING(CHAVE FROM 0 FOR CHAR_LENGTH(CHAVE)); 
											    IF ( TG_OP = 'DELETE') THEN
SELECT (COALESCE(MAX(ID),0) + 1) FROM AUDITORIA INTO NOVOID;
BEGIN
INSERT INTO PUBLIC.AUDITORIA(ID, REGISTROID, TABELA, CAMPO, VALORANTIGO, VALORNOVO, DATAALTERACAO, USUARIO, ALTERACAOID, TIPOOPERACAO)
VALUES (NOVOID,CHAVE, QUOTE_IDENT(TG_RELNAME), NULL, NULL, NULL, CURRENT_TIMESTAMP, USER_ID, IDALTERACAO, TG_OP);
EXCEPTION
						                                WHEN unique_violation THEN
						                                    RETURN NEW;
END;

ELSE  IF ( TG_OP = 'UPDATE') THEN
													    FOR COLUNAS IN
SELECT  COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = QUOTE_IDENT(TG_TABLE_SCHEMA)
  AND TABLE_NAME = QUOTE_IDENT(TG_TABLE_NAME)
ORDER BY ORDINAL_POSITION
    LOOP
														CONTINUE WHEN (COLUNAS.COLUMN_NAME = 'DATACADASTRO' OR COLUNAS.COLUMN_NAME = 'DATAALTERACAO' OR COLUNAS.COLUMN_NAME = 'USUARIOCADASTRO_ID' OR COLUNAS.COLUMN_NAME = 'USUARIOALTERACAO_ID');
SELECT (COALESCE(MAX(ID),0) + 1) FROM AUDITORIA INTO NOVOID;
EXECUTE 'SELECT ($1).' || COLUNAS.COLUMN_NAME || '::TEXT' INTO CAMPO_ANTIGO USING OLD;
EXECUTE 'SELECT ($1).' || COLUNAS.COLUMN_NAME || '::TEXT' INTO CAMPO_NOVO USING NEW;
IF (CAMPO_NOVO IS NULL AND CAMPO_ANTIGO IS NOT NULL) OR (CAMPO_ANTIGO IS NULL AND CAMPO_NOVO IS NOT NULL) OR (CAMPO_NOVO <> CAMPO_ANTIGO) THEN
BEGIN
INSERT INTO PUBLIC.AUDITORIA(ID, REGISTROID, TABELA, CAMPO, VALORANTIGO, VALORNOVO, DATAALTERACAO, USUARIO, ALTERACAOID, TIPOOPERACAO)
VALUES (NOVOID, CHAVE, QUOTE_IDENT(TG_RELNAME), COLUNAS.COLUMN_NAME, CAMPO_ANTIGO, CAMPO_NOVO, CURRENT_TIMESTAMP, USER_ID, IDALTERACAO, TG_OP);
EXCEPTION
						                                        WHEN unique_violation THEN
						                                            RETURN NEW;
END;
END IF;
END LOOP;
END IF;
END IF;
RETURN NEW;
END;
											$body$;